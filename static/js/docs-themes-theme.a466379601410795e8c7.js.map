{"version":3,"sources":["/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/docs/sampleData/lineData.js","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/docs/themes/customThemes.js","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/docs/themes/Theme.mdx","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/common/config.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/utils/getInnerGraphDimensionAndMargin.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/hooks/useChartDimensions.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/utils/getAxisProjectedValues.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/hooks/useCartesianEncodings.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/frames/SvgWithAxisFrame.tsx","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/line/LineChart.tsx","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/bar/BarChart.tsx","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/index.ts"],"names":["lineData","x","y","date","weekday","redTheme","colors","category","xAxis","strokeColor","tickStrokeColor","yAxis","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","objectWithoutProperties","index_es","assign","mdxType","id","parentName","className","index_esm","__position","__code","__scope","this","Playground","Props","LineChart","Theme","ThemeProvider","customRedTheme","__codesandbox","style","width","height","graph_src","theme","src","data","field","type","scale","of","isMDXComponent","DEFAULT_VALS","MARGIN","top","right","bottom","left","DEFAULT_LENGTH","getInnerGraphDimensionAndMargin","dimension","margin","legendDimension","legendOrient","outerWidth","outerHeight","graphWidth","graphHeight","graphMargin","objectSpread","graphDimension","useChartDimensions","arguments","length","undefined","color","chartRef","useRef","legendRef","outerDimension","useContainerDimension","legend","orient","_useMemo","useMemo","getAxisProjectedValues","dataGroups","xSelector","ySelector","getColorString","projections","xPositions","forEach","group","groupIdx","row","xStrVal","getFormattedStringVal","yStrVal","xPos","getScaledVal","yPos","push","keys","reduce","accum","groupedY","column","concat","toConsumableArray","sort","a","b","getLinearDomainFromDataGroup","keyField","valueField","aggreatedMax","aggreatedMin","key","val","Math","min","apply","values","max","useCartesianEncodings","sortedData","getValue","getValByScaleType","getOriginalVal","record","rowA","rowB","encodings","filter","encoding","getDataGroupByEncodings","axisScale","getXAxisScale","axisLength","domain","getYAxisScale","getRecordFieldSelector","colorScale","getColorScale","defaultColor","axisProjectedValues","scalesConfig","rowValSelectors","getString","FrameContent","showLeftAxis","showBottomAxis","axisInBackground","svgOverlay","children","axisLayer","react_default","createElement","Fragment","transform","defaultProps","SvgWithAxisFrame","React","forwardRef","ref","position","SvgWithAxisFrame_FrameContent","getXPosByIndex","arr","idx","arrIdx","HoveringIndicator","hovering","projectedPoints","circles","map","pointY","cx","cy","r","fill","x1","y1","x2","y2","stroke","strokeWidth","DataLine","_ref2","rows","lineDots","dataRow","index","vx_shape_es","strokeLinecap","strokeLinejoin","_ref3","useContext","ThemeContext","_useChartDimensions","_useHoverState","useHoverState","clearHovering","hoveredPoint","setHoveredPosAndIndex","_useCartesianEncoding","graphGroup","colorString","LineChart_DataLine","hoverDetectionComponents","rectX","rectWidth","opacity","LineChart_HoveringIndicator","paddingInner","BarChart","_ref2$margin","_ref2$paddingInner","xEncoding","scaleConfig","yEncoding","bandScale","linearScale","bandWidth","bandwidth","getHoveringRectPos","useCallback","paddingVal","baseY","positiveY","nonPositiveY","getAccumY","scaledY","rowIdx","abs","xOffset","BarChart_HoveringIndicator","__webpack_require__","d","__webpack_exports__","LineChart_LineChart","BarChart_BarChart"],"mappings":"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","file":"static/js/docs-themes-theme.c84e3e50.js","sourcesContent":["const lineData = [\n  { x: 0, y: 9, date: '2019/01/21 00:00:00', weekday: 'Mon' },\n  { x: 1, y: 5, date: '2019/01/22 00:00:00', weekday: 'Tue' },\n  { x: 2.5, y: 5, date: '2019/01/23 00:00:00', weekday: 'Wed' },\n  { x: 3, y: 3, date: '2019/01/24 00:00:00', weekday: 'Thu'},\n  { x: 4, y: 1, date: '2019/01/25 00:00:00', weekday: 'Fri' },\n];\n\nexport default lineData;\n","export const redTheme = {\n    colors: {\n        category: ['#d01040']\n    },\n    xAxis: {\n        strokeColor: '#d01040',\n        tickStrokeColor: '#d01040',\n    },\n    yAxis: {\n        strokeColor: '#d01040',\n        tickStrokeColor: '#d01040',\n    }\n};\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz'\nimport { LineChart } from '@ichef/transcharts-chart'\nimport { Theme, ThemeProvider } from '@ichef/transcharts-graph'\nimport lineData from '../sampleData/lineData';\nimport { redTheme as customRedTheme } from './customThemes';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"theme\"\n    }}>{`Theme`}</h1>\n    <p>{`By default, we have a default theme in `}<inlineCode parentName=\"p\">{`transchart`}</inlineCode>{` so you can directly render Chart component.\nHowever, if you'd like to customize theme for your chart, you could use `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{`.\nWrapping the charts where you want to customize with `}<inlineCode parentName=\"p\">{`ThemeProvider`}</inlineCode>{`, pass your custom theme object, and it's done.\nThe theme object could be partial of theme.`}</p>\n    <h1 {...{\n      \"id\": \"line-chart\"\n    }}>{`Line Chart`}</h1>\n    <p>{`We use the following example data to generate the example charts below.`}</p>\n    <p><strong parentName=\"p\">{`Example Data and red theme:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const lineData = [\n  { x: 0, y: 9, date: '2019/01/21 00:00:00', weekday: 'Mon' },\n  { x: 1, y: 5, date: '2019/01/22 00:00:00', weekday: 'Tue' },\n  { x: 2, y: 5, date: '2019/01/23 00:00:00', weekday: 'Wed' },\n  { x: 3, y: 3, date: '2019/01/24 00:00:00', weekday: 'Thu'},\n  { x: 4, y: 1, date: '2019/01/25 00:00:00', weekday: 'Fri' },\n];\nconst customRedTheme = {\n  colors: {\n    category: ['#d01040']\n  },\n  xAxis: {\n    strokeColor: '#d01040',\n    tickStrokeColor: '#d01040',\n  },\n  yAxis: {\n    strokeColor: '#d01040',\n    tickStrokeColor: '#d01040',\n  },\n}\n`}</code></pre>\n    <Playground __position={0} __code={'<div style={{ width: \\'100%\\', height: \\'320px\\' }}>\\n  <ThemeProvider theme={customRedTheme}>\\n    <LineChart\\n      data={lineData}\\n      x={{ field: \\'x\\', type: \\'quantitative\\', scale: \\'linear\\' }}\\n      y={{ field: \\'y\\', type: \\'quantitative\\', scale: \\'linear\\' }}\\n    />\\n  </ThemeProvider>\\n</div>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      LineChart,\n      Theme,\n      ThemeProvider,\n      lineData,\n      customRedTheme\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AABSgVxEhSIRQgwJZoIHOx5FdY12gPAAvP1-TtSD2AAGTQGB7D8e1MKNWV2gAAViTYwEkVF3DgcgqIIOBzU41xhQIiD2Cg6wYCPJZRKPNDKFYLgMnYGi3QYpiYBYtjUA4rieMQ2Y8EEoj2CgcitWiVwsLoj0DzgSQKl_EyCFcSQjOdezXH09VhInbJJMROxehRSIxXQHyFPM91pFOayJjE-BvjyCIiB8uB3PtQNJTC-UzXaMFUF0FFjlOXDnAIRIsXYbhhPWKIBGeVArnaAAGdgkxmLB2j3asZg7FgZ3qgAWVr2AANla9r1jAYCADFvWgRJ6v4ZxDgRB1MBgoR-CWIhqEoOAuoRMbqwmmhnAgXDLnYABGPqOvkHK8qmABBOZyvYCMoM46B0DDBSOXKsRXujGR2BRUqYG4YA8OK0G4HkLca2AD6oC-4IADIUfGRJ5koZpEeR8xuAJuUwGQyUBlQdp2AAfg2T6wwjX6rlxsNburKQZCrN8zBhDzMDAMIoCmem_oB1mnuXasEzSggcEmzIUivAg4ZrWsgZB2BwagnF0AmeqLoahqAFJ2t8GAIBSQh6qTAAmBrRoU2GV2VxgfOk2Sp3xGLwf8hKgp8h2JeVmtGDI51KP40QA8Dmt0FM8HnJgVyWajqOsA1w0IHndB6rapYSvmeqAEdQncGIHJiVgYGNjj4nO9p4_4in5CT5PlcSNPIEz-rEmNvPa6LkuXmiNhK6WavYHq-uBEb5uW83R2g8kF2hDdjIlYX9mVykKWZblhW4akMWObML8QCsmzvTJBPTKc4zTP_LQKGA_QGHuwzb4cl6AG11igrArgapYc12AAE4lgx1oPVG2F1gGSAahdSQVsLrsH1ogFB-tjYjCCNsGOQD2h6moI3DqFhf5XAuoAq4ABWMBWRIFwJgXAhBVtkENVQSw9BSxMEwGwfBeqlgGSEJ_uwP-7ArY4CoS0Sh1CIFyigfQ-BVskzMNYawjBWCcH1QAOrZAEdWEhzVyH6OODQmRdDYHyL6kotBDVVFcPUXKawHQlCCOEddCRl0pG11kWYhBFDLFsOsRwtRPC5SywgDogAuiqf0zosAGV5vzKY8dXJRJPmfaKR5rLe0iEle-gFdAgQMGBbm9pX5dGCpsI8L1gArioFAIU9xKqRxrHEWgKQhRAM_u0AAxOgOBDU-rWPCSuJxAcsAPSwLYK41SmkWBREIbYFFKB1LLHKHpfSBkHRbjEHYxV5mLOWfVNZesNlEJrCM1u4zJmNJbnMygCzHAHNWb045AT54WG2dsXZdz9lCkOc8_pryA4s3kCkpQIA9rbFcGke-1A8lP1AiAaZFh-CoG9IyJA7B-A_GLNUDI5ofyXw2usfgFcBD5GoPwK4_AGo4BpQ1Il1Z-DlHIP0GY3Z_QYv4A9YGhFYDQiwBfPlmAySUESLmPIBQvJml4kWP4pYGXIpAFENAlLMUqHDBoOACq1XCroJgXKGctUYqRTWJlhVVX8AAHoXVpTgPq2rFWmklBakA1qho4AABw4Aug6tVTqLRWhdW6z13r-DrGBSfHF3gPjUEgCkGFqA4V6ARdUkAtAfRZEpVi00tBzT-vNLMGY_B5AKCbkAA`} mdxType=\"Playground\">\n  <div style={{\n        width: '100%',\n        height: '320px'\n      }}>\n    <ThemeProvider theme={customRedTheme} mdxType=\"ThemeProvider\">\n      <LineChart data={lineData} x={{\n            field: 'x',\n            type: 'quantitative',\n            scale: 'linear'\n          }} y={{\n            field: 'y',\n            type: 'quantitative',\n            scale: 'linear'\n          }} mdxType=\"LineChart\" />\n    </ThemeProvider>\n  </div>\n    </Playground>\n    <h2 {...{\n      \"id\": \"proptypes\"\n    }}>{`propTypes`}</h2>\n    <Props of={ThemeProvider} mdxType=\"Props\" />\n    <p>{`the `}<inlineCode parentName=\"p\">{`theme`}</inlineCode>{` type has following attributes:`}</p>\n    <h2 {...{\n      \"id\": \"theme-attributes\"\n    }}><inlineCode parentName=\"h2\">{`theme`}</inlineCode>{` attributes:`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  /** common colors */\n  colors: {\n    /** colors used for nominal data */\n    category: ReadonlyArray<string>;\n  };\n  /** xaxis theme config */\n  xAxis: {\n    /** color of stroke */\n    strokeColor: string;\n    /** color of ticke stroke */\n    tickStrokeColor: string;\n    /** width of stroke */\n    strokeWidth: number;\n    /** font size of tick */\n    tickFontSize: number;\n  }\n  /** yaxis theme config */\n  yAxis: {\n    /** color of stroke */\n    strokeColor: string;\n    /** color of ticke stroke */\n    tickStrokeColor: string;\n    /** width of stroke */\n    strokeWidth: number;\n    /** font size of tick */\n    tickFontSize: number;\n  }\n};\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"currently-default-theme\"\n    }}>{`Currently default theme`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`{\n  colors: {\n      /** see [d3-scale-chromatic](https://github.com/d3/d3-scale-chromatic) */\n      category: d3.schemeCategory10,\n  },\n  xAxis: {\n      strokeColor: '#7c8a94',\n      tickStrokeColor: '#7c8a94',\n      strokeWidth: 1.5,\n      tickFontSize: 13,\n  },\n  yAxis: {\n      strokeColor: '#7c8a94',\n      tickStrokeColor: '#7c8a94',\n      strokeWidth: 1.5,\n      tickFontSize: 13,\n  },\n}\n`}</code></pre>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","export const DEFAULT_VALS = {\n  MARGIN: {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 60,\n  },\n};\n","import { GraphDimension, Margin, LegendConfig } from '@ichef/transcharts-graph';\n\nconst DEFAULT_LENGTH = 300;\n\n/**\n * Returns the inner width and height of the graph\n * @param dimension - the outer width and height of the graph\n * @param margin - the lengths of top, right, bottom, and left margin\n * @param legendDimension - the width and height of the legend\n * @param legendOrient - orient of legend\n */\nexport function getInnerGraphDimensionAndMargin(\n  dimension: GraphDimension,\n  margin: Margin,\n  legendDimension: GraphDimension,\n  legendOrient: LegendConfig['orient'],\n) {\n  const { width: outerWidth, height: outerHeight } = dimension;\n  const { top, right, bottom, left } = margin;\n  let graphWidth = DEFAULT_LENGTH;\n  let graphHeight = DEFAULT_LENGTH;\n  const graphMargin = { ...margin };\n  switch (legendOrient) {\n    case 'left':\n    case 'right': {\n      graphWidth = outerWidth > 0\n        ? outerWidth - left - right - legendDimension.width\n        : DEFAULT_LENGTH;\n      graphHeight = outerHeight > 0 ? outerHeight - top - bottom : DEFAULT_LENGTH;\n      if (legendOrient === 'left') {\n        graphMargin.left += legendDimension.width;\n      }\n      break;\n    }\n    case 'top':\n    case 'bottom': {\n      graphWidth = outerWidth > 0 ? outerWidth - left - right : DEFAULT_LENGTH;\n      graphHeight = outerHeight > 0\n        ? outerHeight - top - bottom - legendDimension.height\n        : DEFAULT_LENGTH;\n      if (legendOrient === 'top') {\n        graphMargin.top += legendDimension.height;\n      }\n      break;\n    }\n    default: {\n      break;\n    }\n  }\n\n  return {\n    graphMargin,\n    graphDimension: {\n      width: graphWidth,\n      height: graphHeight,\n    },\n  };\n}\n","import { useRef, useMemo } from 'react';\nimport {\n  // from common types\n  Margin,\n  GraphDimension,\n  ColorEncoding,\n  // from hooks\n  useContainerDimension,\n} from '@ichef/transcharts-graph';\n\nimport { getInnerGraphDimensionAndMargin } from '../utils/getInnerGraphDimensionAndMargin';\n\n/**\n * Returns a ref to be bind with a container,\n * and it calculates the inner and outer dimension of the graph\n * based on the given margin.\n */\nexport const useChartDimensions = (\n  /** Margin between the inner graph area and the outer svg */\n  margin: Margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 60,\n  },\n  color?: ColorEncoding,\n) => {\n  // compute the outer and inner dimension of the chart\n  const chartRef = useRef<HTMLDivElement>(null);\n  const legendRef = useRef<HTMLDivElement>(null);\n  const outerDimension: GraphDimension = useContainerDimension(chartRef);\n  const legendDimension = useContainerDimension(legendRef);\n  const legendOrient = (color && color.legend && color.legend.orient) || 'right';\n\n  const { graphDimension, graphMargin }  = useMemo(\n    () => {\n      return getInnerGraphDimensionAndMargin(\n        outerDimension,\n        margin,\n        legendDimension,\n        legendOrient,\n      );\n    },\n    [outerDimension, margin, legendDimension, legendOrient],\n  );\n\n  return {\n    /** Ref to the chart, which is to be passed in the props of the container */\n    chartRef,\n\n    /** Ref to the legend, which is to be passed in the props of the legend */\n    legendRef,\n\n    /** Width and height of the outer container */\n    outerDimension,\n\n    /** Width and height of the inner graph (does not contain axes, legend, etc...) */\n    graphDimension,\n\n    /** Margin between the chart container and the inner graph */\n    graphMargin,\n  };\n};\n","import {\n  // from common types\n  FieldSelector,\n} from '@ichef/transcharts-graph';\n\n/**\n * Return the y-values in the `dataGroups` grouped by projected x values.\n * -  Structure of groupedY: \"groupedY\":[ { \"index of dataGroup\": \"value\" }, ... ]\n * @example\n * [{\n *  \"xPos\": 0,\n *  \"xStrVal\": \"0\",\n *  \"groupedY\": [{\"groupIdx\": 0, \"yStrVal\": 9, \"yPos\": 18, \"color\": \"#deebf7\"}],\n *  },\n * {\n *  \"xPos\": 109.12812500000001,\n *  \"xStrVal\": \"2\",\n *  \"groupedY\": [{\"groupIdx\": 0, \"yStrVal\": 3, \"yPos\": 6, \"color\": \"#deebf7\"}, ...],\n * }]\n */\nexport function getAxisProjectedValues(\n  /** Data grouped in `useCartesianEncodings()`  */\n  dataGroups: object[][],\n\n  /** Functions to get value on the x-axis */\n  xSelector: FieldSelector,\n\n  /** Functions to get value on the y-axis */\n  ySelector: FieldSelector,\n\n  /** Functions to get the formatted color string */\n  getColorString: (record: any) => string,\n) {\n  // project by original values on the axis\n  const projections = {};\n  const xPositions = {};\n  dataGroups.forEach((group, groupIdx) => {\n    group.forEach((row) => {\n      const xStrVal = xSelector.getFormattedStringVal(row);\n      const yStrVal = ySelector.getFormattedStringVal(row);\n      const xPos = xSelector.getScaledVal(row);\n      const yPos = ySelector.getScaledVal(row);\n      if (!projections[xStrVal]) {\n        projections[xStrVal] = [];\n        xPositions[xStrVal] = xPos;\n      }\n      projections[xStrVal].push({\n        groupIdx,\n        yStrVal,\n        yPos,\n        color: getColorString(row),\n      });\n    });\n  });\n\n  // convert the position along the axis, and sort by the converted values\n  const columns = Object.keys(projections).reduce(\n    (accum, xStrVal: any) => {\n      const groupedY = projections[xStrVal];\n      // ensure that we always get the correct type, not a string instead\n      const xPos: number = xPositions[xStrVal] || 0;\n      const column = {\n        xPos,\n        xStrVal,\n        groupedY,\n      };\n\n      return [...accum, column];\n    },\n    []\n  );\n\n  return columns.sort((a, b) => (a.xPos - b.xPos));\n}\n","import { useMemo } from 'react';\nimport values from 'lodash/values';\nimport {\n  // from utils\n  getColorScale,\n  getDataGroupByEncodings,\n  getXAxisScale,\n  getYAxisScale,\n  getRecordFieldSelector,\n  getValByScaleType,\n  // from common types\n  Encoding,\n  AxisEncoding,\n  ColorEncoding,\n  GraphDimension,\n  // from themes\n  Theme,\n  // from TooltipLayer\n  AxisProjectedValue,\n} from '@ichef/transcharts-graph';\n\nimport { getAxisProjectedValues } from '../utils/getAxisProjectedValues';\n\n/**\n * Return [min, max] of a column selected from the grouped data\n */\nfunction getLinearDomainFromDataGroup(\n  dataGroups: object[][],\n  keyField: string,\n  valueField: string,\n) {\n  const aggreatedMax: object = {};\n  const aggreatedMin: object = {};\n  dataGroups.forEach((data: object[]) => {\n    data.forEach((row) => {\n      const key = row[keyField];\n      const val = row[valueField];\n      if (val >= 0) {\n        aggreatedMax[key] = aggreatedMax[key]\n          ? aggreatedMax[key] + val\n          : val;\n      } else {\n        aggreatedMin[key] = aggreatedMin[key]\n          ? aggreatedMin[key] + val\n          : val;\n      }\n    });\n  });\n\n  const min = Math.min(0, ...values(aggreatedMin));\n  const max = Math.max(0, ...values(aggreatedMax));\n\n  return [min, max];\n}\n\n/**\n * It returns calculated groups of data and its value selectors\n * from the given encodings of Cartesian plots.\n */\nexport const useCartesianEncodings = (\n  /** Width and height of the inner graph (does not contain axes, legend, etc...) */\n  graphDimension: GraphDimension,\n\n  /** Theme of the chart */\n  theme: Theme,\n\n  /** Array of rows of data */\n  data: object[],\n\n  /** Field and data type of x-axis */\n  x: AxisEncoding,\n\n  /** Field and data type of y-axis */\n  y: AxisEncoding,\n\n  /** Fields and definitions for colors */\n  color?: ColorEncoding,\n) => {\n  // get the inner width and height of the graph\n  const { width, height } = graphDimension;\n\n  // sort the data\n  const sortedData = useMemo(\n    () => {\n      const getValue = getValByScaleType(x.scale);\n      const getOriginalVal = (record: object) => getValue(record[x.field]);\n\n      return (\n        data.sort(\n          (rowA, rowB) => getOriginalVal(rowA) - getOriginalVal(rowB),\n        )\n      );\n    },\n    [data, x],\n  );\n\n  // groups the data by colors\n  const dataGroups = useMemo(\n    () => {\n      const encodings = [color].filter((encoding): encoding is Encoding => !!encoding);\n      return getDataGroupByEncodings(sortedData, encodings);\n    },\n    [color, sortedData],\n  );\n\n  // the scales and configs of the axis based on its encodings\n  const xAxis = useMemo(\n    () => {\n      const axisScale = getXAxisScale({\n        data,\n        axisLength: width,\n        encoding: x,\n      });\n\n      // update the domain if the domains of x-y scales is band-linear\n      if (x.scale === 'linear' && y.scale === 'band') {\n        axisScale.scale.domain(getLinearDomainFromDataGroup(dataGroups, y.field, x.field));\n      }\n      return axisScale;\n    },\n    [data, width, x],\n  );\n  const yAxis = useMemo(\n    () => {\n      const axisScale = getYAxisScale({\n        data,\n        axisLength: height,\n        encoding: y,\n      });\n\n      // update the domain if the domains of x-y scales is linear-band\n      if (x.scale === 'band' && y.scale === 'linear') {\n        axisScale.scale.domain(getLinearDomainFromDataGroup(dataGroups, x.field, y.field));\n      }\n      return axisScale;\n    },\n    [data, height, y],\n  );\n\n  // selectors to get the original/scaled/formatted values\n  const xSelector = useMemo(\n    () => getRecordFieldSelector(xAxis),\n    [xAxis],\n  );\n  const ySelector = useMemo(\n    () => getRecordFieldSelector(yAxis),\n    [yAxis],\n  );\n\n  // handle the colors\n  const colorScale = useMemo(\n    () => {\n      if (typeof color === 'undefined') {\n        return null;\n      }\n      return getColorScale({\n        data,\n        encoding: color,\n        colors: theme.colors,\n      });\n    },\n    [color, data, theme.colors],\n  );\n  const defaultColor = theme.colors.category[0];\n  const getColorString = useMemo(\n    () => (\n      colorScale\n      ? getRecordFieldSelector(colorScale).getScaledVal\n      : () => defaultColor\n    ),\n    [colorScale, defaultColor],\n  );\n\n  const axisProjectedValues: AxisProjectedValue[] = useMemo(\n    () => {\n      return getAxisProjectedValues(dataGroups, xSelector, ySelector, getColorString);\n    },\n    [dataGroups, xSelector, ySelector, getColorString],\n  );\n\n  return {\n    /** Array of data grouped by fields of colors  */\n    dataGroups,\n\n    /**\n     * The y-values in the `dataGroups` grouped by projected x values.\n     * -  Structure of groupedY: \"groupedY\":[ { \"index of dataGroup\": \"value\" }, ... ]\n     * @example\n     * [{\n     *  \"xPos\": 0,\n     *  \"xStrVal\": \"0\",\n     *  \"groupedY\": [{\"groupIdx\": 0, \"yStrVal\": 9, \"yPos\": 18, \"color\": \"#deebf7\"}],\n     *  },\n     * {\n     *  \"xPos\": 109.12812500000001,\n     *  \"xStrVal\": \"2\",\n     *  \"groupedY\": [{\"groupIdx\": 0, \"yStrVal\": 3, \"yPos\": 6, \"color\": \"#deebf7\"}, ...],\n     * }]\n     */\n    axisProjectedValues,\n\n    /** d3 scale functions and other related configurations computed for various encodings */\n    scalesConfig: {\n      /** scale function and configs for x-axis */\n      x: xAxis,\n\n      /** scale function and configs for y-axis */\n      y: yAxis,\n\n      /** scale function and configs for the color scale; null if there is no color encoding */\n      color: colorScale,\n    },\n\n    /** Contains functions to select values from a data row */\n    rowValSelectors: {\n      /** Functions to get value on the x-axis */\n      x: xSelector,\n\n      /** Functions to get value on the y-axis */\n      y: ySelector,\n\n      /** Functions to get colors */\n      color: {\n        /** Function to get the color string */\n        getString: getColorString,\n      },\n    },\n  };\n};\n","import React from 'react';\nimport {\n  // from AxisLayer\n  AxisLayer,\n  // from common types\n  AxisScale,\n  Margin,\n  GraphDimension,\n} from '@ichef/transcharts-graph';\n\n/**\n * It manages the size of the chart container, SVG, and the axes\n * that generally used across different charts.\n */\nexport interface SvgFrameProps {\n  /** Width and height of the outer container including the margin */\n  outerDimension: GraphDimension;\n\n  /** Width and height of the graph to be drawed inside the SVG group */\n  graphDimension: GraphDimension;\n\n  /** Margin between the inner graph area and the outer svg */\n  margin: Margin;\n\n  /** It determines how the axes are drawn */\n  data: object[];\n\n  /** Should show the axis on the left or not */\n  showLeftAxis: boolean;\n\n  /** Should show the axis on the bottom or not */\n  showBottomAxis: boolean;\n\n  /** Whether to display the axes in the background or foreground of the chart */\n  axisInBackground: boolean;\n\n  scalesConfig: {\n    x: AxisScale,\n    y: AxisScale,\n  };\n\n  /** Elements to be overlayed on top of the SVG */\n  svgOverlay?: React.ReactNode;\n\n  /** Elements to be drawed inside of the SVG */\n  children: React.ReactNode;\n}\n\nconst defaultProps = {\n  showLeftAxis: true,\n  showBottomAxis: true,\n  axisInBackground: true,\n};\n\nconst FrameContent = ({\n  outerDimension,\n  graphDimension,\n  margin,\n  data,\n  scalesConfig,\n  showLeftAxis,\n  showBottomAxis,\n  axisInBackground,\n  svgOverlay,\n  children,\n}: SvgFrameProps) => {\n  const { width: outerWidth, height: outerHeight } = outerDimension;\n  const { width: graphWidth, height: graphHeight } = graphDimension;\n  const axisLayer = (\n    <AxisLayer\n      width={graphWidth}\n      height={graphHeight}\n      showLeftAxis={showLeftAxis}\n      showBottomAxis={showBottomAxis}\n      data={data}\n      xAxis={scalesConfig.x}\n      yAxis={scalesConfig.y}\n    />\n  );\n\n  return (\n    <>\n      <svg width={outerWidth} height={outerHeight}>\n        <g transform={`translate(${margin.left}, ${margin.top})`}>\n          {axisInBackground ? (<>{axisLayer}{children}</>) : (<>{children}{axisLayer}</>)}\n        </g>\n      </svg>\n      {svgOverlay}\n    </>\n  );\n};\nFrameContent.defaultProps = defaultProps;\n\nexport const SvgWithAxisFrame = React.forwardRef<\n  HTMLDivElement,\n  JSX.LibraryManagedAttributes<typeof FrameContent, SvgFrameProps>\n>((props, ref) => (\n  <div\n    ref={ref}\n    style={{ width: '100%', height: '100%', position: 'relative' }}\n  >\n    <FrameContent {...props} />\n  </div>\n));\n","import React, { useContext, useMemo } from 'react';\nimport { LinePath } from '@vx/shape';\nimport {\n  // from HoverLayer\n  HoverLayer,\n  // from hooks\n  useHoverState,\n  // from TooltipLayer\n  TooltipLayer,\n  AxisProjectedValue,\n  // from Legend,\n  LegendGroup,\n  // from common types\n  Margin,\n  FieldSelector,\n  AxisEncoding,\n  ColorEncoding,\n  // from themes\n  Theme,\n  ThemeContext,\n} from '@ichef/transcharts-graph';\n\nimport { useChartDimensions } from '../hooks/useChartDimensions';\nimport { useCartesianEncodings } from '../hooks/useCartesianEncodings';\nimport { SvgWithAxisFrame } from '../frames/SvgWithAxisFrame';\nimport { DEFAULT_VALS } from '../common/config';\n\n/**\n * Return the position of the hovering detection rect.\n * If the given index exceeds its bound, it will return its closest value.\n */\nfunction getXPosByIndex(arr: AxisProjectedValue[], idx: number) {\n  let arrIdx = idx < 0 ? 0 : idx;\n  if (idx >= arr.length) {\n    arrIdx = arr.length - 1;\n  }\n  return arr[arrIdx].xPos;\n}\n\nexport interface LineChartProps {\n  /** Margin between the inner graph area and the outer svg */\n  margin: Margin;\n\n  /** Should show the axis on the left or not */\n  showLeftAxis?: boolean;\n\n  /** Should show the axis on the bottom or not */\n  showBottomAxis?: boolean;\n\n  data: object[];\n  x: AxisEncoding;\n  y: AxisEncoding;\n  color?: ColorEncoding;\n}\n\n/** A line and a dot for the point being hovered */\nconst HoveringIndicator = ({ hovering, projectedPoints, height }: {\n  hovering: boolean,\n  projectedPoints: AxisProjectedValue,\n  height: number,\n}) => {\n  if (!hovering) {\n    return null;\n  }\n\n  const circles = projectedPoints.groupedY.map(pointY => (\n    <circle\n      key={`c-${pointY.yStrVal}`}\n      cx={projectedPoints.xPos}\n      cy={pointY.yPos}\n      r={4.5}\n      fill={pointY.color}\n    />\n  ));\n\n  return(\n    <>\n      <line\n        x1={projectedPoints.xPos}\n        y1={0}\n        x2={projectedPoints.xPos}\n        y2={height}\n        style={{ stroke:'rgba(124, 137, 147, 0.25)', strokeWidth: 2 }}\n      />\n      {circles}\n    </>\n  );\n};\n\nconst DataLine = ({ color, xSelector, ySelector, rows }: {\n  color: string,\n  xSelector: FieldSelector,\n  ySelector: FieldSelector,\n  rows: object[],\n}) => {\n  const lineDots = rows.map((dataRow, index) => (\n    <circle\n      key={`c-${index}`}\n      cx={xSelector.getScaledVal(dataRow)}\n      cy={ySelector.getScaledVal(dataRow)}\n      r={3.5}\n      fill={color}\n    />\n  ));\n  return (\n    <>\n      {/* Draw the line */}\n      <LinePath\n        data={rows}\n        x={xSelector.getScaledVal}\n        y={ySelector.getScaledVal}\n        stroke={color}\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n\n      {/* Draw dots on the line */}\n      {lineDots}\n    </>\n  );\n};\n\nconst defaultProps = {\n  margin: DEFAULT_VALS.MARGIN,\n};\n\nexport const LineChart = ({\n  data,\n  margin,\n  x,\n  y,\n  color,\n  showLeftAxis,\n  showBottomAxis,\n}: LineChartProps) => {\n  const theme = useContext<Theme>(ThemeContext);\n  const {\n    chartRef,\n    legendRef,\n    outerDimension,\n    graphDimension,\n    graphMargin,\n  } = useChartDimensions(margin, color);\n  const { width: graphWidth, height: graphHeight } = graphDimension;\n  const { clearHovering, hovering, hoveredPoint, setHoveredPosAndIndex } = useHoverState();\n  const {\n    dataGroups,\n    scalesConfig,\n    rowValSelectors,\n    axisProjectedValues,\n  } = useCartesianEncodings(graphDimension, theme, data, x, y, color);\n\n  const graphGroup = useMemo(\n    () => (\n      dataGroups.map(\n        (rows: object[], index: number) => {\n          const colorString: string = rowValSelectors.color.getString(rows[0]);\n          return (\n            <DataLine\n              key={`row-${index}`}\n              color={colorString}\n              rows={rows}\n              xSelector={rowValSelectors.x}\n              ySelector={rowValSelectors.y}\n            />\n          );\n        }\n      )\n    ),\n    [dataGroups, rowValSelectors]\n  );\n\n  const hoverDetectionComponents = useMemo(\n    () => (\n      axisProjectedValues.map(\n        (row, idx) => {\n          const rectX = (row.xPos + getXPosByIndex(axisProjectedValues, idx - 1)) / 2;\n\n          const rectWidth = (\n            (row.xPos + getXPosByIndex(axisProjectedValues, idx + 1)) / 2\n          ) - rectX;\n\n          return (\n            <rect\n              // #TODO: use unique keys rather than array index\n              key={`colli-${idx}`}\n              x={rectX}\n              y={0}\n              width={rectWidth}\n              height={graphHeight}\n              opacity={0}\n            />\n          );\n        }\n      )\n    ),\n    [axisProjectedValues, graphHeight]\n  );\n\n  return (\n    <SvgWithAxisFrame\n      ref={chartRef}\n      outerDimension={outerDimension}\n      graphDimension={graphDimension}\n      showLeftAxis={showLeftAxis}\n      showBottomAxis={showBottomAxis}\n      margin={graphMargin}\n      data={data}\n      scalesConfig={scalesConfig}\n      svgOverlay={\n        <>\n          {/* Draw the tooltip */}\n          <TooltipLayer\n            hovering={hovering}\n            hoveredPoint={hoveredPoint}\n            axisProjectedValues={axisProjectedValues}\n            graphWidth={graphWidth}\n            graphHeight={graphHeight}\n            margin={graphMargin}\n          />\n          {/* Draw the legned */}\n          <LegendGroup\n            color={color && {\n              ...color,\n              ...scalesConfig.color!,\n            }}\n            ref={legendRef}\n          />\n        </>\n      }\n    >\n      {graphGroup}\n      <HoveringIndicator\n        hovering={hovering}\n        projectedPoints={axisProjectedValues[hoveredPoint.index]}\n        height={graphHeight}\n      />\n\n      {/* Areas which are used to detect mouse or touch interactions */}\n      <HoverLayer\n        setHoveredPosAndIndex={setHoveredPosAndIndex}\n        clearHovering={clearHovering}\n        hoverDetectionComponents={hoverDetectionComponents}\n      />\n    </SvgWithAxisFrame>\n  );\n};\nLineChart.defaultProps = defaultProps;\n","import React, { useContext, useMemo, useCallback } from 'react';\nimport { ScaleBand, ScaleLinear } from 'd3-scale';\nimport {\n  // from HoverLayer\n  HoverLayer,\n  // from hooks\n  useHoverState,\n  // from TooltipLayer\n  TooltipLayer,\n  // from Legend,\n  LegendGroup,\n  // from common types\n  Margin,\n  AxisEncoding,\n  ColorEncoding,\n  // from themes\n  Theme,\n  ThemeContext,\n} from '@ichef/transcharts-graph';\n\nimport { useChartDimensions } from '../hooks/useChartDimensions';\nimport { useCartesianEncodings } from '../hooks/useCartesianEncodings';\nimport { SvgWithAxisFrame } from '../frames/SvgWithAxisFrame';\nimport { DEFAULT_VALS } from '../common/config';\n\n/** A line and a dot for the point being hovered */\nconst HoveringIndicator = ({ hovering, x, y, width, height }: {\n  hovering: boolean,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n}) => {\n  if (!hovering) {\n    return null;\n  }\n\n  return(\n    <rect\n      x={x}\n      y={y}\n      width={width}\n      height={height}\n      opacity={0.5}\n      fill=\"rgba(124, 137, 147, 0.25)\"\n    />\n  );\n};\n\nexport interface BarChartProps {\n  /** Margin between the inner graph area and the outer svg */\n  margin?: Margin;\n\n  /** Should show the axis on the left or not */\n  showLeftAxis?: boolean;\n\n  /** Should show the axis on the bottom or not */\n  showBottomAxis?: boolean;\n\n  /** Ratio of the paddings between bars */\n  paddingInner: number;\n\n  data: object[];\n  x: AxisEncoding;\n  y: AxisEncoding;\n  color?: ColorEncoding;\n}\n\nconst defaultProps = {\n  margin: DEFAULT_VALS.MARGIN,\n  paddingInner: 0.1,\n};\n\nexport const BarChart = ({\n  data,\n  // FIXME: remove the default margin after fixing the defaultProps of`<SvgWithAxisFrame>`\n  margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 60,\n  },\n  x,\n  y,\n  color,\n  showLeftAxis,\n  showBottomAxis,\n  paddingInner = 0.1,\n}: BarChartProps) => {\n  const theme = useContext<Theme>(ThemeContext);\n  const { chartRef, legendRef, outerDimension, graphDimension } = useChartDimensions(margin);\n  const { width: graphWidth, height: graphHeight } = graphDimension;\n\n  const xEncoding: AxisEncoding = { ...x, scale: 'band', scaleConfig: {\n    paddingInner,\n  }};\n  const yEncoding: AxisEncoding = { ...y, scale: 'linear' };\n  const {\n    dataGroups,\n    scalesConfig,\n    rowValSelectors,\n    axisProjectedValues,\n  } = useCartesianEncodings(graphDimension, theme, data, xEncoding, yEncoding, color);\n  const { clearHovering, hovering, hoveredPoint, setHoveredPosAndIndex } = useHoverState();\n\n  const bandScale = scalesConfig.x.scale as ScaleBand<any>;\n  const linearScale = scalesConfig.y.scale as ScaleLinear<any, any>;\n  const bandWidth = bandScale.bandwidth();\n\n  /**\n   * Returns the size and position of the hovering detection rectangle\n   * or hovering highlight rectangle\n   */\n  const getHoveringRectPos = useCallback(\n    (idx: number) => {\n      const paddingVal = bandWidth * paddingInner;\n      const xPos = idx === 0\n        ? 0\n        : axisProjectedValues[idx].xPos - paddingVal / 2;\n      const width = idx === 0 || idx === data.length - 1\n            ? bandWidth + paddingVal / 2\n            : bandWidth + paddingVal;\n\n      return {\n        width,\n        height: graphHeight,\n        x: xPos,\n        y: 0,\n      };\n    },\n    [bandWidth, paddingInner],\n  );\n\n  const hoverDetectionComponents = useMemo(\n    () => (\n      axisProjectedValues.map(\n        (row, idx) => {\n          return (\n            <rect\n              // #TODO: use unique keys rather than array index\n              key={`colli-${idx}`}\n              x={row.xPos}\n              y={0}\n              height={graphHeight}\n              width={bandWidth}\n              opacity={0}\n              {...{ ...getHoveringRectPos(idx) }}\n            />\n          );\n        }\n      )\n    ),\n    [axisProjectedValues, graphHeight, bandWidth, getHoveringRectPos]\n  );\n\n  const graphGroup = useMemo(\n    () => {\n      const baseY = linearScale(0);\n\n      // calculate the accumulated y position of certain points\n      const positiveY = {};\n      const nonPositiveY = {};\n      const getAccumY = (xPos: number, scaledY: number) => {\n        if (scaledY >= 0) {\n          if (!positiveY[xPos]) {\n            positiveY[xPos] = baseY;\n          }\n          positiveY[xPos] -= scaledY;\n          return positiveY[xPos];\n        }\n\n        // scaledY < 0\n        const yPos = !nonPositiveY[xPos] ? baseY : nonPositiveY[xPos];\n        nonPositiveY[xPos] = yPos - scaledY;\n        return yPos;\n      };\n\n      return dataGroups.map(\n        (rows: object[], groupIdx: number) => {\n          return rows.map((row: object, rowIdx: number) => {\n            const colorString: string = rowValSelectors.color.getString(rows[0]);\n            const xPos = rowValSelectors.x.getScaledVal(row);\n            const scaledY = rowValSelectors.y.getScaledVal(row);\n            const height = scaledY >= 0\n              ? baseY - scaledY\n              : baseY - graphHeight - scaledY;\n\n            return (\n              <rect\n                key={`bar-${rowIdx}`}\n                x={xPos}\n                y={getAccumY(xPos, height)}\n                width={bandWidth}\n                height={Math.abs(height)}\n                fill={colorString}\n              />\n            );\n          });\n        }\n      );\n    },\n    [dataGroups, scalesConfig, rowValSelectors],\n  );\n\n  return (\n    <SvgWithAxisFrame\n      ref={chartRef}\n      outerDimension={outerDimension}\n      graphDimension={graphDimension}\n      showLeftAxis={showLeftAxis}\n      showBottomAxis={showBottomAxis}\n      // put the axes on top of the bars\n      axisInBackground={false}\n      margin={margin}\n      data={data}\n      scalesConfig={scalesConfig}\n      svgOverlay={\n        <>\n          {/* Draw the tooltip */}\n          <TooltipLayer\n            hovering={hovering}\n            hoveredPoint={hoveredPoint}\n            axisProjectedValues={axisProjectedValues}\n            graphWidth={graphWidth}\n            graphHeight={graphHeight}\n            margin={margin}\n            xOffset={bandWidth / 2}\n          />\n          {/* Draw the legned */}\n          <LegendGroup\n            color={color && {\n              ...color,\n              ...scalesConfig.color!,\n            }}\n            ref={legendRef}\n          />\n        </>\n      }\n    >\n      {graphGroup}\n      <HoveringIndicator\n        hovering={hovering}\n        {...{ ...getHoveringRectPos(hoveredPoint.index) }}\n      />\n\n      {/* Areas which are used to detect mouse or touch interactions */}\n      <HoverLayer\n        setHoveredPosAndIndex={setHoveredPosAndIndex}\n        clearHovering={clearHovering}\n        hoverDetectionComponents={hoverDetectionComponents}\n      />\n    </SvgWithAxisFrame>\n  );\n};\nBarChart.defaultProps = defaultProps;\n","export * from './common/config';\nexport * from './hooks/useChartDimensions';\nexport * from './hooks/useCartesianEncodings';\nexport * from './line/LineChart';\nexport * from './bar/BarChart';\nexport * from './frames/SvgWithAxisFrame';\nexport * from './utils/getInnerGraphDimensionAndMargin';\n"],"sourceRoot":""}