{"version":3,"sources":["/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/docs/sampleData/drinkData.js","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/docs/chart-settings/DataEncodings.mdx"],"names":["drinkData","restaurant","type","sales","layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","objectWithoutProperties","index_es","assign","mdxType","id","parentName","className","style","width","height","src","title","titleAlign","data","x","field","y","color","isMDXComponent"],"mappings":"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","file":"static/js/docs-chart-settings-data-encodings.23ad5303.js","sourcesContent":["const drinkData = [\n  { restaurant: 'Cafe', type: 'Beer', sales: 100 },\n  { restaurant: 'Tea Time', type: 'Black Tea', sales: 300 },\n  { restaurant: 'Bistro', type: 'Black Tea', sales: 500 },\n  { restaurant: 'Cafe', type: 'Wine', sales: 100 },\n  { restaurant: 'Tea Time', type: 'Wine', sales: 200 },\n  { restaurant: 'Tea Time', type: 'Beer', sales: 150 },\n  { restaurant: 'Bistro', type: 'Wine', sales: 700 },\n];\n\nexport default drinkData;\n","/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz'\nimport { BarChart } from '@ichef/transcharts-chart'\nimport drinkData from '../sampleData/drinkData';\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"data-encodings\"\n    }}>{`Data Encodings`}</h1>\n    <p>{`The data encodings let you select data field to be drawn in an axis or as a dimension of color.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`Encoding {\n  field: string;\n  type: 'nominal' | 'ordinal' | 'quantitative' | 'temporal';\n}\n`}</code></pre>\n    <p>{`You must specify the data type of the encoding,\nand different charts will select the d3 scale functions best-suited for drawing the chart.`}</p>\n    <h3 {...{\n      \"id\": \"data-types\"\n    }}>{`Data Types`}</h3>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Nominal`}</strong>{`: The categorical data, such as names or blood types.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Ordinal`}</strong>{`: Data with meaningful sorted order, such as the degree of satisfaction.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Quantitative`}</strong>{`: Numerical data.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Temporal`}</strong>{`: Datetime data.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"how-different-charts-deal-with-data-encodings\"\n    }}>{`How different charts deal with data encodings?`}</h2>\n    <h3 {...{\n      \"id\": \"bar-chart\"\n    }}>{`Bar Chart`}</h3>\n    <p><inlineCode parentName=\"p\">{`<BarChart>`}</inlineCode>{` takes the types of the encodings of X and Y axis to determine whether it is a vertical or a horizontal chart.\nIf the encoding data type of X-axis is not `}<inlineCode parentName=\"p\">{`quantitative`}</inlineCode>{`, it will draw the default vertical bar chart;\notherwise, it draws the horizontal bar chart.`}</p>\n    <p>{`The data assigned to the axis with `}<inlineCode parentName=\"p\">{`quantitative`}</inlineCode>{` will be converted to the `}<inlineCode parentName=\"p\">{`linear`}</inlineCode>{` scale of d3,\nwhile the other will be converted as the `}<inlineCode parentName=\"p\">{`band`}</inlineCode>{` scale.`}</p>\n    <h4 {...{\n      \"id\": \"vertical-chart\"\n    }}>{`Vertical Chart`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`<BarChart\n  ...\n  x={{ type: 'nominal', field: 'restaurant' }}\n  y={{ type: 'quantitative', field: 'sales' }}\n  color={{ field: \"type\", type: \"nominal\" }}\n/>\n`}</code></pre>\n    <div style={{\n      width: '100%',\n      height: '350px'\n    }}>\n  <BarChart title=\"Sales of Drink\" titleAlign=\"center\" data={drinkData} x={{\n        type: 'nominal',\n        field: 'restaurant'\n      }} y={{\n        type: 'quantitative',\n        field: 'sales'\n      }} color={{\n        field: \"type\",\n        type: \"nominal\"\n      }} mdxType=\"BarChart\" />\n    </div>\n    <h4 {...{\n      \"id\": \"horizontal-chart\"\n    }}>{`Horizontal Chart`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`<BarChart\n  ...\n  x={{ type: 'quantitative', field: 'sales' }}\n  y={{ type: 'nominal', field: 'restaurant' }}\n  color={{ field: \"type\", type: \"nominal\" }}\n/>\n`}</code></pre>\n    <div style={{\n      width: '100%',\n      height: '350px'\n    }}>\n  <BarChart title=\"Sales of Drink\" titleAlign=\"center\" data={drinkData} x={{\n        type: 'quantitative',\n        field: 'sales'\n      }} y={{\n        type: 'nominal',\n        field: 'restaurant'\n      }} color={{\n        field: \"type\",\n        type: \"nominal\"\n      }} mdxType=\"BarChart\" />\n    </div>\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  "],"sourceRoot":""}