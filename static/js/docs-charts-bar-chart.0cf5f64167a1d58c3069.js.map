{"version":3,"sources":["/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/docs/charts/BarChart.mdx","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/docs/sampleData/lineData.js","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/docs/sampleData/multiLinesData.js","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/common/config.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/utils/getInnerGraphDimensionAndMargin.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/hooks/useChartDimensions.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/utils/getAxisProjectedValues.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/hooks/useCartesianEncodings.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/frames/SvgWithAxisFrame.tsx","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/line/LineChart.tsx","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/bar/BarChart.tsx","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/index.ts"],"names":["layoutProps","MDXLayout","MDXContent","_ref","components","props","Object","_Users_hsunpeiwang_Documents_Projects_iChef_transcharts_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectWithoutProperties__WEBPACK_IMPORTED_MODULE_0__","_mdx_js_react__WEBPACK_IMPORTED_MODULE_2__","assign","mdxType","id","parentName","className","docz__WEBPACK_IMPORTED_MODULE_3__","__position","__code","__scope","this","Playground","Props","BarChart","lineData","multiLinesData","__codesandbox","style","width","height","_ichef_transcharts_chart__WEBPACK_IMPORTED_MODULE_4__","data","x","field","type","scale","y","color","size","of","isMDXComponent","date","weekday","mutliLinesData","DEFAULT_VALS","MARGIN","top","right","bottom","left","DEFAULT_LENGTH","getInnerGraphDimensionAndMargin","dimension","margin","headerDimension","legendDimension","legendOrient","outerWidth","outerHeight","graphWidth","graphHeight","graphMargin","objectSpread","graphDimension","useChartDimensions","arguments","length","undefined","chartRef","useRef","legendRef","titleRef","outerDimension","useContainerDimension","legend","orient","_useMemo","useMemo","getAxisProjectedValues","dataGroups","xSelector","ySelector","getColorString","projections","xPositions","forEach","group","groupIdx","row","xStrVal","getFormattedStringVal","yStrVal","xPos","getScaledVal","yPos","push","keys","reduce","accum","groupedY","column","concat","toConsumableArray","sort","a","b","getLinearDomainFromDataGroup","keyField","valueField","aggreatedMax","aggreatedMin","key","val","Math","min","apply","values","max","useCartesianEncodings","theme","sortedData","getValue","getValByScaleType","getOriginalVal","record","rowA","rowB","encodings","filter","encoding","getDataGroupByEncodings","xAxis","axisScale","getXAxisScale","axisLength","domain","yAxis","getYAxisScale","getRecordFieldSelector","colorScale","getColorScale","colors","defaultColor","category","axisProjectedValues","scalesConfig","rowValSelectors","getString","Wrapper","styled","div","_templateObject","fontColor","FrameContent","_ref2","showLeftAxis","showBottomAxis","axisInBackground","svgOverlay","children","axisLayer","react_default","createElement","src","xAxisScale","yAxisScale","Fragment","transform","defaultProps","SvgWithAxisFrame","React","forwardRef","_ref3","ref","title","titleDesc","titleAlign","restProps","objectWithoutProperties","globalStyle","useContext","ThemeContext","SvgWithAxisFrame_FrameContent","desc","align","getXPosByIndex","arr","idx","arrIdx","HoveringIndicator","hovering","projectedPoints","circles","map","pointY","cx","cy","r","fill","x1","y1","x2","y2","stroke","strokeWidth","DataLine","rows","lineDots","dataRow","index","vx_shape_es","strokeLinecap","strokeLinejoin","LineChart","_useChartDimensions","_useHoverState","useHoverState","clearHovering","hoveredPoint","setHoveredPosAndIndex","_useCartesianEncoding","graphGroup","colorString","LineChart_DataLine","hoverDetectionComponents","rectX","rectWidth","opacity","LineChart_HoveringIndicator","paddingInner","_ref2$margin","_ref2$paddingInner","xEncoding","scaleConfig","yEncoding","bandScale","linearScale","bandWidth","bandwidth","getHoveringRectPos","useCallback","paddingVal","baseY","positiveY","nonPositiveY","getAccumY","scaledY","rowIdx","abs","xOffset","BarChart_HoveringIndicator","__webpack_require__","d","__webpack_exports__","LineChart_LineChart","BarChart_BarChart"],"mappings":"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","file":"static/js/docs-charts-bar-chart.28a8a0fa.js","sourcesContent":["/* @jsx mdx */\n  import React from 'react'\n  import { mdx } from '@mdx-js/react'\n  /* @jsx mdx */\nimport { Playground, Props } from 'docz'\nimport { BarChart } from '@ichef/transcharts-chart'\nimport lineData from '../sampleData/lineData';\nimport multiLinesData from '../sampleData/multiLinesData'\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\")\n  return <div {...props}/>\n};\n\nconst layoutProps = {\n  \n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <h1 {...{\n      \"id\": \"bar-chart\"\n    }}>{`Bar Chart`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`<BarChart>`}</inlineCode>{` component supports drawing bars.`}</p>\n    <p>{`We use the following example data to generate the example charts below.`}</p>\n    <p><strong parentName=\"p\">{`Example Data:`}</strong></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const lineData = [\n  { x: 0, y: 9, date: '2019/01/21 00:00:00', weekday: 'Mon' },\n  { x: 1, y: 5, date: '2019/01/22 00:00:00', weekday: 'Tue' },\n  { x: 2, y: 5, date: '2019/01/23 00:00:00', weekday: 'Wed' },\n  { x: 3, y: 3, date: '2019/01/24 00:00:00', weekday: 'Thu'},\n  { x: 4, y: 1, date: '2019/01/25 00:00:00', weekday: 'Fri' },\n];\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"using-different-scales-on-the-x-axis\"\n    }}>{`Using different scales on the X-axis`}</h2>\n    <h3 {...{\n      \"id\": \"linear--linear\"\n    }}>{`Linear + Linear`}</h3>\n    <Playground __position={0} __code={'<div style={{ width: \\'100%\\', height: \\'320px\\' }}>\\n  <BarChart\\n    data={lineData}\\n    x={{ field: \\'x\\', type: \\'quantitative\\', scale: \\'linear\\' }}\\n    y={{ field: \\'y\\', type: \\'quantitative\\', scale: \\'linear\\' }}\\n  />\\n</div>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      BarChart,\n      lineData,\n      multiLinesData\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AABSgVxEhSIRQgwJZoIHOx5FdY12gPAAvP1-TtSD2GvVwBHsPx7Uwo1ZXaAABWJNjASRUXcOByEogg4HNDiyJfFVUEI9V2CgNAYC1aJXCw2iPQPOBJAqX8JIIVxJFE51lNcAiIPYIhQigGIABkxLgTTpPdaRTnkxSyXEyTJD0gyIGM51TMk7SiPYQNJXM-UzXaMFUF0FFjlOXDnAIRIsXYbh2GAdYogEZ5UCudoAAZ2CTGYsHaPdqxmDsWBnVKABZsvYAA2bLcvWMBgIAMW9aBElS_hnEOBEHUwGChH4JYiGoSg4AKhEaurOqaGcCBcMudgAEYSry-RAuCqYAEE5hi9gIygjjoHQMN2HkDkYrEbboxkdgUSimBuGAPCIpuuB5C3GtgD2qADuCAAyb7xkSeZKGaD6vvMbhwblMBkMlAZUHadgAH4Nn2sMIxOq4QbDZbqykGQqzfMwYWEzAwDCAztpO7gzqjHGNuXasE28ggcHqzIUivAhXprWtLuu2A7qgnF0AmVK5rStKAFJct8GAIBSQhUqTAAmNLqqOl6V25xhSPIzjNe545JLu9S7JU7GDYNrABcNCB53QVKcqWSL5lSgBHUJ3BiFSYlYGBpfY-JZvaE2yPh-RzYtmtEmtyA7dSxJpedoP3c9l5ojYP2lgD2BUpDgQw4ji3N313HYxXKQmZZtmOdeqQ6fxswvxAOSFO9WzNLUsTNP_LQKGA_QGFWkSu8kraAG11igrArjSpYWvYABOJZ0CyVKVbmhfJDSubJCVub2HFxBD_F6WRiCbYV_n9o9WoMO8osKerjmuergAVmX1e5XXzft93pWD7SkfQBJ8lhnxgBfeCqVLAMjvpPdg092BKxwO_Fob8P60DXtvH-O8lZJgAUAoBp9z6X1SgAdWyLA6sj9MovxoYbDBX8sFbxwSVfBx80pEPASQuU1gOhKDgQgxaqD5roKDt_Zhu9X5sOARw0BxDIFylZhAShABdAShMsCeRJmTKYJtNICSbi3GysAO6OSMiZbuAFtC6BAgYMCRN7RDz0gQUSLl4BmVihPKh8CZ60KXv9F27B-BJzmn1ehYimG_z3tIwhciuEKOvrfI6984o-JEcIlBScrjBIBjAJWYSV4MPaOIqJ_92GxLnPEq-0C_bJIEVcJWtDMm5OySAJO-SQCiMwRvCRuCYkgMqRAq-5D0CUIfmkpMtDJkBNmjk-YoTOnhO6dg3erDykDLAUMqBeA-EpOoUI-ez8ZmtPaQUz-xTIk4Kkes2RgzuHtCUWM1JCCxZ-Kdi0oJbTckLK6YwnpUT943M4VsuUN84Z1O8QgiqTT3mBLmXks5RSSk4LKTIipmz7k1KedQgA7DC45nzTmLMKRE_5OC8FAriSC9oIzsVpMacI6ZWTCXfMRaSlZSs1loo2fI6pOz2j8MhVcAAHLQo5zL4UdN-Rcslkj-m3IxQkx5EK1GBQcVMbR-lmzhFcRYySBilAgBGtsVwaQe7UEAjYgeYF4rVn4Kgb0jIkCfJ-MWaoGRzQ_lsn1dY_BfYCHyNQfgrS0o4FDWlH1drm7wHIP0GY3Z_TOv4GtK6hFYDQiwG3dNmAySUESLmPIBQJyah4kWP4pZI0WH4FENAwbPmqGwD3Stnyc10EwEFW2cA622u5vwPCdb-AAD05o4CQRGzpK5-CmklAOkAw6Ko4GFTgH5k7BAlqtLO-di7l38HWNjeQTc3XeA-NQSAKRzWoEtf3UCIB4ptJgD6LIwb-CxvFLQc006LSzBmPwA94d5BAA`} mdxType=\"Playground\">\n  <div style={{\n        width: '100%',\n        height: '320px'\n      }}>\n    <BarChart data={lineData} x={{\n          field: 'x',\n          type: 'quantitative',\n          scale: 'linear'\n        }} y={{\n          field: 'y',\n          type: 'quantitative',\n          scale: 'linear'\n        }} mdxType=\"BarChart\" />\n  </div>\n    </Playground>\n    <h3 {...{\n      \"id\": \"time--linear\"\n    }}>{`Time + Linear`}</h3>\n    <Playground __position={1} __code={'<div style={{ width: \\'100%\\', height: \\'320px\\' }}>\\n  <BarChart\\n    data={lineData}\\n    x={{ field: \\'date\\', type: \\'quantitative\\', scale: \\'time\\' }}\\n    y={{ field: \\'x\\', type: \\'quantitative\\', scale: \\'linear\\' }}\\n  />\\n</div>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      BarChart,\n      lineData,\n      multiLinesData\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AABSgVxEhSIRQgwJZoIHOx5FdY12gPAAvP1-TtSD2GvVwBHsPx7Uwo1ZXaAABWJNjASRUXcOByEogg4HNDiyJfFVUEI9V2CgNAYC1aJXCw2iPQPOBJAqX8JIIVxJFE51lNcAiIPYIhQigGIABkxLgTTpPdaRTnkxSyXEyTJD0gyIGM51TMk7SiPYQNJXM-UzXaMFUF0FFjlOXDnAIRIsXYbh2GAdYogEZ5UCudoAAZ2CTGYsHaPdqxmDsWBnVKABZsvYAA2bLcvWMBgIAMW9aBElS_hnEOBEHUwGChH4JYiGoSg4AKhEaurOqaGcCBcMudgAEYSry-RAuCqYAEE5hi9gIygjjoHQMN2HkDkYrEbboxkdgUSimBuGAPCIpuuB5C3GtgD2qADuCAAyb7xkSeZKGaD6vvMbhwblMBkMlAZUHadgAH4Nn2sMIxOq4QbDZbqykGQqzfMwYWEzAwDCAztpO7gzqjHGNuXasE28ggcHqzIUivAhXprWtLuu2A7qgnF0AmVK5rStKAFJct8GAIBSQhUqTAAmNLqqOl6V25xhSPIzjNe545JLu9S7JU7GDYNrABcNCB53QVL0CyaXIvmVKAEdQncGIVJiVgYGl9j4lm9oYiPeH5HNi2a0Sa3IDt1KcqWF3g49r2XmiNh_aWQPYFSk2yPDyOLc3fXcdjFcpCZlm2Y516pDp_GzC_EA5IU71bM0tSxM0_8tAoYD9AYVaRO7yStoAbXWKCsCuNKlha9gAE4lkd2hUpVubF8kNK5skJW5vYcXECP8XpZGIJtkdhf2j1ahw7yixp6uOb56uABWFesnXnet53velcPmlY-QDT5LHPjAS-8FUqWAZPfKe7AZ7sCVjgD-LR36fzXnKDev9d5KyTIA4BwCz4XyvqlAA6tkOB1Yn6ZVfrQw2mD2jYO3rgkqBCT5pWIRA0hcprAdCUPAxBi00HzQwcHZhf8lZv3YSAzhYCSFQLlKzCAVCAC6AlCZYE8iTMmUwTaaQEs3VuNlYCd0ckZEyPcALaF0CBAwYEib2mHnpAgokXLwDMrFSe1CEGzzocvf6rt2D8GTnNPqDDxE_xYXvA-HCiHyO4Yom-d8joPzir40RIjUHJyuCEgGMAlbhNXpEze0SlYALiaAuciTr4wP9qkwRVwlZ0Oyfk3JIBk6FJAGI7-pTJH4MqXI6pkDr4UPQFQx-GSkx0OmYE2aeT5hhO6RE3pOC95sMGVwkZ0C8D8LSTQ4RC8X5zPaZ0opX8sFRMkdIzZCTtlKP6BM9JiCxb-KTm04JHT8lLJ6ZcvpuDYmyPicMnhyS4YNJ8YgiqLT3lBIWQU85jCJG4IqUCqp4D7ntDqU8mhAB2GFJzPlnOWcU1ZZSBloqGRi0FYycUZOaSI2ZOSiXfMRSUtZSsNmUq2aCvh7QBGQquAADjocc5l8Kum_KYVc3BNzuV3NBcotRGjnRaOJjAUm-lmzhDcZYyShilAgBGtsVwaRe7UEArYweYF4rVn4Kgb0jIkCfJ-MWaoGRzQ_lsn1dY_A_YCHyNQfg7S0o4FDWlH1dqW7wHIP0GY3Z_TOv4GtK6hFYDQiwO3dNmAySUESLmPIBQJyah4kWP4pZI0WH4FENAwbPmqGwL3Stnyc10EwEFW2cA622u5vwPCdb-AAD05o4GQRG7pK5-CmklAOkAw6Ko4CFTgH5k7BAlqtLO-di7l38HWNjeQzc3XeA-NQSAKRzWoEtQPUCIB4odJgD6LIwb-CxvFLQc006LSzBmPwA9Ed5BAA`} mdxType=\"Playground\">\n  <div style={{\n        width: '100%',\n        height: '320px'\n      }}>\n    <BarChart data={lineData} x={{\n          field: 'date',\n          type: 'quantitative',\n          scale: 'time'\n        }} y={{\n          field: 'x',\n          type: 'quantitative',\n          scale: 'linear'\n        }} mdxType=\"BarChart\" />\n  </div>\n    </Playground>\n    <h3 {...{\n      \"id\": \"point--linear\"\n    }}>{`Point + Linear`}</h3>\n    <Playground __position={2} __code={'<div style={{ width: \\'100%\\', height: \\'320px\\' }}>\\n  <BarChart\\n    data={lineData}\\n    x={{ field: \\'weekday\\', type: \\'quantitative\\', scale: \\'point\\' }}\\n    y={{ field: \\'y\\', type: \\'quantitative\\', scale: \\'linear\\' }}\\n  />\\n</div>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      BarChart,\n      lineData,\n      multiLinesData\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AABSgVxEhSIRQgwJZoIHOx5FdY12gPAAvP1-TtSD2GvVwBHsPx7Uwo1ZXaAABWJNjASRUXcOByEogg4HNDiyJfFVUEI9V2CgNAYC1aJXCw2iPQPOBJAqX8JIIVxJFE51lNcAiIPYIhQigGIABkxLgTTpPdaRTnkxSyXEyTJD0gyIGM51TMk7SiPYQNJXM-UzXaMFUF0FFjlOXDnAIRIsXYbh2GAdYogEZ5UCudoAAZ2CTGYsHaPdqxmDsWBnVKABZsvYAA2bLcvWMBgIAMW9aBElS_hnEOBEHUwGChH4JYiGoSg4AKhEaurOqaGcCBcMudgAEYSry-RAuCqYAEE5hi9gIygjjoHQMN2HkDkYrEbboxkdgUSimBuGAPCIpuuB5C3GtgD2qADuCAAyb7xkSeZKGaD6vvMbhwblMBkMlAZUHadgAH4Nn2sMIxOq4QbDZbqykGQqzfMwYWEzAwDCAztpO7gzqjHGNuXasE28ggcHqzIUivAhXprWtLuu2A7qgnF0AmVK5rStKAFJct8GAIBSQhUqTAAmNLqqOl6V25xhSPIzjNe545JLu9S7JU7GDYNrABcNCB53QVKRiCbZ0Hg6XIvmVKAEdQncGIVJiVgYGl9j4lm9pBTQF91f17nEmtyA7dSxI3YBsPvd9l5ojYIOlhD2BUpNsj4fkc2LfYTd9dx2MVykJmWbZjnXqkOn8bML8QDkhTvVszS1LEzT_y0ChgP0BhVpE_vJK2gBtdYoKwK40qWFr2AATiWF3aFSlW5tXyQ0rmyQlbm9hxcQM_xelx2YGd-DUr1ahi7yix56uObl6uABWDesm3g-94PkfJWp80rn1AZfJY19b4r3aJYBkT857sAXuwJWOBv4tC_j_Lecod4AMPkrJMICwFgKvk7F2MCADq2QEHVlfplD-9DDbYPaLg_e-CSpEIvmlUhN9yGpWsB0JQiDkGLQwfNLBYdWGAKVp_Th4DuGQLIXfOUrMIA0IALoCUJlgTyJMyZTBNppAS7dO42VgL3RyRkTIDwAtoXQIEDBgSJvaceekCCiRcvAMysVZ60KQYvBh69_oe3YPwd2MA5p9SYZI_-bCj4ny4SQxRvDlHtAfnDI6z84r-PEWI9B4SrhhNTkrKJm8Ym7ziUrYBiSIFzhSTAuBQdMnCKuErBh-TU6FJAOEkpIAJF_wqdIwhNSFF1OgalKh6AaEvxyUmBhczgmzSKfMSJfTokDLwUfDhIyeHjLlAI9oQi_EiIYe_RZXSemlN_jg2J0jZE7OSXs9oqjpnZOQWLQJSwCmhO6anVZ_SbmDPwQk-RSSxl8LlOk15dCKrtK-Z0n5ly1llI2ZU6poLalQIhbA-BzTjlXAAOxwvOYi4pVzmFSPwcMjFoysWpMmdCnJbSxELO-csiJ5LymbKVtsmluzsUHKOTM5BAAOU58KQnst6QClhtz8H3L5Y87FLy8WaMCs4qYej9LNnCB46xkljFKBACNbYrg0iD2oIBexo8wLxWrPwVA3pGRIB-T8Ys1QMjmh_LZPq6x-CBwEPkag_AulpRwGGtKvr7Ud3gOQfoMxuz-hdfwNaV1CKwGhFgbuGbMBkkoIkXMeQCgTk1DxIsfxSxRosPwKIaAQ0_NUNgQeVafm5roJgIKts4D1rtdzfgeF638AAHpzRwKgyNfSVz8FNJKQdIAR0VRwCKnA_yp2CFLVaOdC6l0rv4OsbG8h27uu8B8agkAUgWtQFakeoEQDxW6TAH0WQQ38DjeKWg5oZ0WlmDMfgh6S7yCAA`} mdxType=\"Playground\">\n  <div style={{\n        width: '100%',\n        height: '320px'\n      }}>\n    <BarChart data={lineData} x={{\n          field: 'weekday',\n          type: 'quantitative',\n          scale: 'point'\n        }} y={{\n          field: 'y',\n          type: 'quantitative',\n          scale: 'linear'\n        }} mdxType=\"BarChart\" />\n  </div>\n    </Playground>\n    <h2 {...{\n      \"id\": \"stacked-bar-chart\"\n    }}>{`Stacked bar chart`}</h2>\n    <h3 {...{\n      \"id\": \"nominal-color-field\"\n    }}>{`Nominal color field`}</h3>\n    <p>{`You can use the same properties of multi-series line charts to create stacked bar charts.`}</p>\n    <Playground __position={3} __code={'<div style={{ width: \\'100%\\', height: \\'320px\\' }}>\\n  <BarChart\\n    data={multiLinesData}\\n    x={{ type: \\'quantitative\\', field: \\'x\\' }}\\n    y={{ type: \\'quantitative\\', field: \\'y\\' }}\\n    color={{\\n      field: \\'type\\',\\n      type: \\'nominal\\',\\n    }}\\n  />\\n</div>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      BarChart,\n      lineData,\n      multiLinesData\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AABSgVxEhSIRQgwJZoIHOx5FdY12gPAAvP1-TtSD2GvVwBHsPx7Uwo1ZXaAABWJNjASRUXcOByEogg4HNDiyJfFVUEI9V2CgNAYC1aJXCw2iPQPOBJAqX8JIIVxJFE51lNcAiIPYIhQigGIABkxLgTTpPdaRTnkxSyXEyTJD0gyIGM51TMk7SiPYQNJXM-UzXaMFUF0FFjlOXDnAIRIsXYbh2GAdYogEZ5UCudoAAZ2CTGYsHaPdqxmDsWBnVKABZsvYAA2bLcvWMBgIAMW9aBElS_hnEOBEHUwGChH4JYiGoSg4AKhEaurOqaGcCBcMudgAEYSry-RAuCqYAEE5hi9gIygjjoHQMN2HkDkYrEbboxkdgUSimBuGAPCIpuuB5C3GtgD2qADuCAAyb7xkSeZKGaD6vvMbhwblMBkMlAZUHadgAH4Nn2sMIxOq4QbDZbqykGQqzfMwYWEzAwDCAztpO7gzqjHGNuXasE28ggcHqzIUivAhXprWtLuu2A7qgnF0AmVK5rStKAFJct8GAIBSQhUqTAAmNLqqOl6V25xhSPIzjNe545JLuxyjJMzTsYNg2sAF_75lSgBHUJ3BiFSYlYGBpcged0FSnL1f17nEhtyK7blR3nZeaI2A9pYvc-1LEnh-QLctmsqCgIUBYDg2459uUQ5j7PuYL1LUEiNB4jG1Oa2T7PN313HYxXKQmZZtmOdeqQ6fxswvxAOSFO9WzNLUsTNP_LQKGA_QGFWkSx8kraAG11igrArjSpYWvYABOJZ0CyVKVbmnfJDSubJCVub2HFxBb_F6WRiCbYD-39o9WoJO8osNerjmrergAFZ96HzlMfU-59L5KxvmlO-sCH5LCfjAF-8FUqWAZF_Ve7B17sCVjgYBLQgEgNoEfc-ECL5KyTDAuBcDH7P1fqlAA6tkTB1Zf6ZQARww2JCwFkLPhQkq1D75pTocghhcprAdCUFgnBi1CHzWIbNdo4D-GX0AUI-BIjEH0NQXKVmEBWEAF0BKEywJ5EmZMpjqTsipASfcB42VgCPE2zkzaSQnoBXQIEDBgSJvaOeekCCiRcvAMysUV5sOwRvThe9bazX4AXOafVuFKJUZAq-GjaHaLEbo9-n8jrfzilEhR8iCEl3YAkgGMAlbJIPjw5RfD0nQOEVkucOS37oI9gUmRVwlacLKVUq4lT5g1JAIo0hJ9VGUMyQgtpKC37MPQKwn-xSkycLWXEoZIBEm1NAQ0yZ6TBEtNmUg-ZaC8BSMKewuR29_6bIqdsqpozxm8IORQ9RxytFzPEe0fRyyik4LFjEpY5ThkwCSWMlJEzyGX2vp80RZy5Qfzht0yJOCKr9JBYMh5BdnlQteTCpWzTNGtNOT8zp_z2EAHZMX3LBXiupqTGkUKofC7JiL2iLMpcUvp8iNmgsefMCFLz9mEqOSSk5OiOkXPaNItFVwAAcnC7kCtxbs-paT3kzK-WS3JfzUXGMCn4qYFj9LNnCMEtxtje5KBACNbYrg0gT2oJ46eoEQDxWrPwVA3pGRIAeT8Ys1QMjmh_LZPq6x-DuwEPkag_AtlpRwImtKEavX93gOQfoMxuz-n9fwNaV1CKwGhFgIexbMBkkoIkXMeQCgTk1DxIsfxSyposPwKIaB40PNUNgCeraHkVroJgIKEB4Bds9dzfgeEu38AAHpzRwHglNYyVz8FNJKGdIB50VRwAqnAwrV2CAbVaTd27d37v4OsbG8g-5Bu8B8agkAUjOtQK6vQ7r4rbJgD6LI8b-CZvFLQc066LSzBmPwG9yd5BAA`} mdxType=\"Playground\">\n  <div style={{\n        width: '100%',\n        height: '320px'\n      }}>\n    <BarChart data={multiLinesData} x={{\n          type: 'quantitative',\n          field: 'x'\n        }} y={{\n          type: 'quantitative',\n          field: 'y'\n        }} color={{\n          field: \"type\",\n          type: \"nominal\"\n        }} mdxType=\"BarChart\" />\n  </div>\n    </Playground>\n    <h3 {...{\n      \"id\": \"quantitative-color-field\"\n    }}>{`Quantitative color field`}</h3>\n    <Playground __position={4} __code={'<div style={{ width: \\'100%\\', height: \\'320px\\' }}>\\n  <BarChart\\n    data={[\\n      { x: 1, y: 5, size: 3 },\\n      { x: 3, y: -7, size: 3 },\\n      { x: 3, y: -3, size: 5 },\\n      { x: 3, y: -5, size: 8 },\\n      { x: 9, y: 7, size: 3 },\\n      { x: 7, y: 1, size: 3 },\\n      { x: 7, y: -5, size: 4 },\\n      { x: 4, y: -2, size: 5 },\\n      { x: 1, y: 10, size: 5 },\\n      { x: 6, y: 4, size: 5 },\\n      { x: 8, y: 9, size: 5 },\\n      { x: 9, y: 0, size: 5 },\\n      { x: 5, y: 3, size: 8 },\\n      { x: 3, y: 8, size: 8 },\\n      { x: 4, y: 4, size: 8 },\\n      { x: 10, y: 7, size: 8 },\\n    ]}\\n    x={{ type: \\'quantitative\\', field: \\'x\\' }}\\n    y={{ type: \\'quantitative\\', field: \\'y\\' }}\\n    color={{\\n      field: \\'size\\',\\n      type: \\'ordinal\\',\\n    }}\\n  />\\n</div>'} __scope={{\n      props: this ? this.props : props,\n      Playground,\n      Props,\n      BarChart,\n      lineData,\n      multiLinesData\n    }} __codesandbox={`N4IgZglgNgpgziAXKCA7AJjAHgOgBYAuAtlEqAMYD2qBMNSIAPOhAG4AEE6AvADogAnSpQL8AfIwD0LVmJABfADQg0mXACsEyEFRp0CDSQCojvVO3YAVPBDjsAwpUwBlAIYYARpSzs8rux4wdOyuAK4ElESuBBDkrlBQAJ7sAOZ0MALRMOjsoXBoKWYWAAZUmHDu6F5YGcU47ACSYOyJlKEA5AIw7OShAhBtdniUAO7sBH4Evq4ADjPp6IotbT3uRT14MOQA1uxtU20C7OiU5EMZMIi-BAQzcIiSkikQE6EeOFREkmXwldXfTl-nm8GTM6yay1C7Gw836dHI3XcyTgBAEoRSKVgdhGLzw4xsdgqwKwSxmsH83UytkR5lscFCMHW1FSuLe9UQAEozEZJGYIEQZpQBFMAEowVzkKZgIREdidcWS9oAbj5AqFooVBAAIgB5ACy7GlkTlXQlBAAtCciMrVYLhQ5IoLUPpDTK5ThJNhXALYDbUGYxWbdXqcF0MBkABTrZhsMTrCyMPAAZjEjjVzponDVwuy7BxEx6gKJVRBAkQUmTcfMFnYjBmYgjDSmUWSztzrnQLBi1Hi7BmQju40oqRgUxe7DDmH6qBSeZgCQ5Unr8draadLskVYT0ljijMJ16RH0ODSBAAorAjzQAEKJBroCOdYQEdpc1AcpUKZRen0wHCaMgdGoWh6EQFRsymYB2AABSgVxEhSIRQgwJZoIHOx5FdY12gPAAvP1-TtSD2GvVwBHsPx7Uwo1ZXaAABWJNjASRUXcOByEogg4HNDiyJfFVUEI9V2CgNAYC1aJXCw2iPQPOBJAqX8JIIVxJFE51lNcAiIPYIhQigGIABkxLgTTpPdaRTnkxSyXEyTJD0gyIGM51TMk7SiPYQNJXM-UzXaMFUF0FFjlOXDnAIRIsXYbh2GAdYogEZ5UCudoAAZ2CTGYsHaPdqxmDsWBnVKABZsvYAA2bLcvWMBgIAMW9aBElS_hnEOBEHUwGChH4JYiGoSg4AKhEaurOqaGcCBcMudgAEYSry-RAuCqYAEE5hi9gIygjjoHQMN2HkDkYrEbboxkdgUSimBuGAPCIpuuB5C3GtgD2qADuCAAyb7xkSeZKGaD6vvMbhwblMBkMlAZUHadgAH4Nn2sMIxOq4QbDZbqykGQqzfMwYWEzAwDCAztpO7gzqjHGNuXasE28ggcHqzIUivAhXprWtLuu2A7qgnF0AmVK5rStKAFJct8GAIBSQhUqTAAmNLqqOl6V25xhSPIzjNe545JLugBtfWDbi9gsCuOalha9gAFYlnyGariTI68vN82oKtzLbauc0AHYnem2a3aUM2De912_fYc0k2Dl2HfdiPuaj32Wn9x2rpDq4AA5k4Zz2LDTgBOGOg-zxOw49ou3stq4K7tm3K9Dgva7rn3G8zhPZpKtv24tn3Foz2OlZ7q57f79u0-bpu0vHpPw8Lou04qmPh-d2bJ6XgfB7zmOy5biep9r0uY_no_F5r6f64dmP48v_Od4HtOH7t3OF6f6_T9v4e7Y3nO7Av4pw7tbC-dsK6bzzifc2ABdbG7csAC3-vMVKABHUI7gYgqRiKwGA0tIDznQKlHK6sQGJGQZFVBcoMFYJeNENg-CliEM-qlRI8N5AINrlQKAQoBYgIsCw4hcpN5jV3lQ2a7QhRFXiGI2unCI6bn1rjWMK4pBMxZmzDmr0pB03xmYL8IA5IKW9LZTSakxKaX_FoCgwF9AMFWiJSxkktqm2rGncBVxD7oCyKlFWc0S6SDSnNSQSs5rsHFogSJ4tpYjCCNsHxdt2h6moBwmuM8Y5Zx8bQPxwTAnBNCUrCJaUoklJiUsOJMAEnwVSpYBkaT1hpyVjgLOdssm-LlP4_JISlZu2iWUtKsT4mJNSgAdWyA09xt837R0NjkzpeSgk9L7v00pQyqkjLlNYDoz805_2tksbJkiulLNCZPVZ5S5wbJqXKVmEBJmwIEoTLAnkSZkymOpOyKkBKGOMTZWA5jHJGRMlYgC2hdAgQMGBIm9pHF6QIKJFy8AzKxTccXW-nj2CHwkVcfgEi5p9TmccxZBSwnFNKWsipwybnJNSf3DJI8s44vYHigGMAlaEqObkgJpylZFIuYMql1ykl1PwfS2-Y9GVLGZay-YHKQCHI6e0E5pK-kDMpVc6pSTxnoEmein2Mz04ypAPizlSqVXLPJf09ZWral4B2ek3-Mdm7GokfKxV8zlUkp6ec9VlzKm2tuf0PVe95qYuxWy3FJq2UEoVUS7l3TQnhIFTazZtK4bip9mvKVKDZqyvZWaz1FrClWoGammloqQ1py7nfXNUa3WFuJTy1VpaNUBrTTqqtEr77SsjSy6N8xY0eqbYmpWKy_WCs1Wm7Z7Rdm3w_iPF1fb83uvjQs5tPrW3-upUku5DynnOhecTGApN9LNnCIikFkkflKBACNbYrg0jWOoIBCF9iwLxWrPwVA3pGRIH7T8Ys1QMjmh_LZPq6x-B4IEPkag_Ao1pRwIhtKEGv1GPgOQfoMxuz-n_fwNa2dfzQiwKY2AxwYBkkoIkXMeQCgTk1DxIsfxSyoYsPwKIaB4P9tUNgaxrH-2YHmOGIKEB4Bcc_dzfgeEuP8AAHpzRwM0lDCqVz8FNJKGTIB5MVRwLnHAQ7VOCAY1aTT2ndP6f4OsbG8hDFAe8B8agkAUjPtQK-uxoEQDxRNTAH0WR4P8Ew-KWg5p1MWlmDMfgNnOHyCAA`} mdxType=\"Playground\">\n  <div style={{\n        width: '100%',\n        height: '320px'\n      }}>\n    <BarChart data={[{\n          x: 1,\n          y: 5,\n          size: 3\n        }, {\n          x: 3,\n          y: -7,\n          size: 3\n        }, {\n          x: 3,\n          y: -3,\n          size: 5\n        }, {\n          x: 3,\n          y: -5,\n          size: 8\n        }, {\n          x: 9,\n          y: 7,\n          size: 3\n        }, {\n          x: 7,\n          y: 1,\n          size: 3\n        }, {\n          x: 7,\n          y: -5,\n          size: 4\n        }, {\n          x: 4,\n          y: -2,\n          size: 5\n        }, {\n          x: 1,\n          y: 10,\n          size: 5\n        }, {\n          x: 6,\n          y: 4,\n          size: 5\n        }, {\n          x: 8,\n          y: 9,\n          size: 5\n        }, {\n          x: 9,\n          y: 0,\n          size: 5\n        }, {\n          x: 5,\n          y: 3,\n          size: 8\n        }, {\n          x: 3,\n          y: 8,\n          size: 8\n        }, {\n          x: 4,\n          y: 4,\n          size: 8\n        }, {\n          x: 10,\n          y: 7,\n          size: 8\n        }]} x={{\n          type: 'quantitative',\n          field: 'x'\n        }} y={{\n          type: 'quantitative',\n          field: 'y'\n        }} color={{\n          field: \"size\",\n          type: \"ordinal\"\n        }} mdxType=\"BarChart\" />\n  </div>\n    </Playground>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={BarChart} mdxType=\"Props\" />\n    </MDXLayout>;\n}\n\nMDXContent.isMDXComponent = true;\n  ","const lineData = [\n  { x: 0, y: 9, date: '2019/01/21 00:00:00', weekday: 'Mon' },\n  { x: 1, y: 5, date: '2019/01/22 00:00:00', weekday: 'Tue' },\n  { x: 2.5, y: 5, date: '2019/01/23 00:00:00', weekday: 'Wed' },\n  { x: 3, y: 3, date: '2019/01/24 00:00:00', weekday: 'Thu'},\n  { x: 4, y: 1, date: '2019/01/25 00:00:00', weekday: 'Fri' },\n];\n\nexport default lineData;\n","export const mutliLinesData = [\n  { x: 0, y: 9, type: \"type1\", date: '2019/01/21 00:00:00', weekday: 'Mon' },\n  { x: 1, y: 5, type: \"type2\", date: '2019/01/22 00:00:00', weekday: 'Tue' },\n  { x: 2, y: 5, type: \"type2\", date: '2019/01/23 00:00:00', weekday: 'Wed' },\n  { x: 3, y: 3, type: \"type1\", date: '2019/01/24 00:00:00', weekday: 'Thu'},\n  { x: 4, y: 1, type: \"type2\", date: '2019/01/25 00:00:00', weekday: 'Fri' },\n  { x: 10, y: 9, type: \"type1\", date: '2019/01/21 00:00:00', weekday: 'Mon' },\n  { x: 6, y: 5, type: \"type2\", date: '2019/01/22 00:00:00', weekday: 'Tue' },\n  { x: 7, y: 5, type: \"type2\", date: '2019/01/23 00:00:00', weekday: 'Wed' },\n  { x: 2, y: 3, type: \"type1\", date: '2019/01/24 00:00:00', weekday: 'Thu'},\n  { x: 8, y: 1, type: \"type2\", date: '2019/01/25 00:00:00', weekday: 'Fri' },\n];\n\nexport default mutliLinesData;\n","export const DEFAULT_VALS = {\n  MARGIN: {\n    top: 20,\n    right: 20,\n    bottom: 50,\n    left: 55,\n  },\n};\n","import { GraphDimension, Margin, LegendConfig } from '@ichef/transcharts-graph';\n\nconst DEFAULT_LENGTH = 300;\n\n/**\n * Returns the inner width and height of the graph\n * @param dimension - the outer width and height of the graph\n * @param margin - the lengths of top, right, bottom, and left margin\n * @param headerDimension - the width and height of the header box\n * @param legendDimension - the width and height of the legend\n * @param legendOrient - orient of legend\n */\nexport function getInnerGraphDimensionAndMargin(\n  dimension: GraphDimension,\n  margin: Margin,\n  headerDimension: GraphDimension,\n  legendDimension: GraphDimension,\n  legendOrient: LegendConfig['orient'],\n) {\n  const { width: outerWidth, height: outerHeight } = dimension;\n  const { top, right, bottom, left } = margin;\n  let graphWidth = DEFAULT_LENGTH;\n  let graphHeight = DEFAULT_LENGTH;\n  const graphMargin = { ...margin };\n\n  // deal with the legend\n  switch (legendOrient) {\n    case 'left':\n    case 'right': {\n      graphWidth = outerWidth > 0\n        ? outerWidth - left - right - legendDimension.width\n        : DEFAULT_LENGTH;\n      graphHeight = outerHeight > 0 ? outerHeight - top - bottom : DEFAULT_LENGTH;\n      if (legendOrient === 'left') {\n        graphMargin.left += legendDimension.width;\n      }\n      break;\n    }\n    case 'top':\n    case 'bottom': {\n      graphWidth = outerWidth > 0 ? outerWidth - left - right : DEFAULT_LENGTH;\n      graphHeight = outerHeight > 0\n        ? outerHeight - top - bottom - legendDimension.height\n        : DEFAULT_LENGTH;\n      if (legendOrient === 'top') {\n        graphMargin.top += legendDimension.height;\n      }\n      break;\n    }\n    default: {\n      break;\n    }\n  }\n\n  // deal with the header box\n  graphMargin.top += headerDimension.height;\n  graphHeight -= headerDimension.height;\n\n  return {\n    graphMargin,\n    graphDimension: {\n      width: graphWidth,\n      height: graphHeight,\n    },\n  };\n}\n","import { useRef, useMemo } from 'react';\nimport {\n  // from common types\n  Margin,\n  GraphDimension,\n  ColorEncoding,\n  // from hooks\n  useContainerDimension,\n} from '@ichef/transcharts-graph';\n\nimport { getInnerGraphDimensionAndMargin } from '../utils/getInnerGraphDimensionAndMargin';\n\n/**\n * Returns a ref to be bind with a container,\n * and it calculates the inner and outer dimension of the graph\n * based on the given margin.\n */\nexport const useChartDimensions = (\n  /** Margin between the inner graph area and the outer svg */\n  margin: Margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 60,\n  },\n  color?: ColorEncoding,\n) => {\n  // compute the outer and inner dimension of the chart\n  const chartRef = useRef<HTMLDivElement>(null);\n  const legendRef = useRef<HTMLDivElement>(null);\n  const titleRef = useRef<HTMLDivElement>(null);\n  const outerDimension: GraphDimension = useContainerDimension(chartRef);\n  const legendDimension = useContainerDimension(legendRef);\n  const headerDimension = useContainerDimension(titleRef);\n  const legendOrient = (color && color.legend && color.legend.orient) || 'right';\n\n  const { graphDimension, graphMargin }  = useMemo(\n    () => {\n      return getInnerGraphDimensionAndMargin(\n        outerDimension,\n        margin,\n        headerDimension,\n        legendDimension,\n        legendOrient,\n      );\n    },\n    [\n      outerDimension,\n      margin,\n      headerDimension,\n      legendDimension,\n      legendOrient,\n    ],\n  );\n\n  return {\n    /** Ref to the chart, which is to be passed in the props of the container */\n    chartRef,\n\n    /** Ref to the header box, which is to be passed in the props of the header box */\n    titleRef,\n\n    /** Ref to the legend, which is to be passed in the props of the legend */\n    legendRef,\n\n    /** Width and height of the outer container */\n    outerDimension,\n\n    /** Width and height of the inner graph (does not contain axes, legend, etc...) */\n    graphDimension,\n\n    /** Margin between the chart container and the inner graph */\n    graphMargin,\n  };\n};\n","import {\n  // from common types\n  FieldSelector,\n} from '@ichef/transcharts-graph';\n\n/**\n * Return the y-values in the `dataGroups` grouped by projected x values.\n * -  Structure of groupedY: \"groupedY\":[ { \"index of dataGroup\": \"value\" }, ... ]\n * @example\n * [{\n *  \"xPos\": 0,\n *  \"xStrVal\": \"0\",\n *  \"groupedY\": [{\"groupIdx\": 0, \"yStrVal\": 9, \"yPos\": 18, \"color\": \"#deebf7\"}],\n *  },\n * {\n *  \"xPos\": 109.12812500000001,\n *  \"xStrVal\": \"2\",\n *  \"groupedY\": [{\"groupIdx\": 0, \"yStrVal\": 3, \"yPos\": 6, \"color\": \"#deebf7\"}, ...],\n * }]\n */\nexport function getAxisProjectedValues(\n  /** Data grouped in `useCartesianEncodings()`  */\n  dataGroups: object[][],\n\n  /** Functions to get value on the x-axis */\n  xSelector: FieldSelector,\n\n  /** Functions to get value on the y-axis */\n  ySelector: FieldSelector,\n\n  /** Functions to get the formatted color string */\n  getColorString: (record: any) => string,\n) {\n  // project by original values on the axis\n  const projections = {};\n  const xPositions = {};\n  dataGroups.forEach((group, groupIdx) => {\n    group.forEach((row) => {\n      const xStrVal = xSelector.getFormattedStringVal(row);\n      const yStrVal = ySelector.getFormattedStringVal(row);\n      const xPos = xSelector.getScaledVal(row);\n      const yPos = ySelector.getScaledVal(row);\n      if (!projections[xStrVal]) {\n        projections[xStrVal] = [];\n        xPositions[xStrVal] = xPos;\n      }\n      projections[xStrVal].push({\n        groupIdx,\n        yStrVal,\n        yPos,\n        color: getColorString(row),\n      });\n    });\n  });\n\n  // convert the position along the axis, and sort by the converted values\n  const columns = Object.keys(projections).reduce(\n    (accum, xStrVal: any) => {\n      const groupedY = projections[xStrVal];\n      // ensure that we always get the correct type, not a string instead\n      const xPos: number = xPositions[xStrVal] || 0;\n      const column = {\n        xPos,\n        xStrVal,\n        groupedY,\n      };\n\n      return [...accum, column];\n    },\n    []\n  );\n\n  return columns.sort((a, b) => (a.xPos - b.xPos));\n}\n","import { useMemo } from 'react';\nimport values from 'lodash/values';\nimport {\n  // from utils\n  getColorScale,\n  getDataGroupByEncodings,\n  getXAxisScale,\n  getYAxisScale,\n  getRecordFieldSelector,\n  getValByScaleType,\n  // from common types\n  Encoding,\n  AxisEncoding,\n  ColorEncoding,\n  GraphDimension,\n  // from themes\n  Theme,\n  // from TooltipLayer\n  AxisProjectedValue,\n} from '@ichef/transcharts-graph';\n\nimport { getAxisProjectedValues } from '../utils/getAxisProjectedValues';\n\n/**\n * Return [min, max] of a column selected from the grouped data\n */\nfunction getLinearDomainFromDataGroup(\n  dataGroups: object[][],\n  keyField: string,\n  valueField: string,\n) {\n  const aggreatedMax: object = {};\n  const aggreatedMin: object = {};\n  dataGroups.forEach((data: object[]) => {\n    data.forEach((row) => {\n      const key = row[keyField];\n      const val = row[valueField];\n      if (val >= 0) {\n        aggreatedMax[key] = aggreatedMax[key]\n          ? aggreatedMax[key] + val\n          : val;\n      } else {\n        aggreatedMin[key] = aggreatedMin[key]\n          ? aggreatedMin[key] + val\n          : val;\n      }\n    });\n  });\n\n  const min = Math.min(0, ...values(aggreatedMin));\n  const max = Math.max(0, ...values(aggreatedMax));\n\n  return [min, max];\n}\n\n/**\n * It returns calculated groups of data and its value selectors\n * from the given encodings of Cartesian plots.\n */\nexport const useCartesianEncodings = (\n  /** Width and height of the inner graph (does not contain axes, legend, etc...) */\n  graphDimension: GraphDimension,\n\n  /** Theme of the chart */\n  theme: Theme,\n\n  /** Array of rows of data */\n  data: object[],\n\n  /** Field and data type of x-axis */\n  x: AxisEncoding,\n\n  /** Field and data type of y-axis */\n  y: AxisEncoding,\n\n  /** Fields and definitions for colors */\n  color?: ColorEncoding,\n) => {\n  // get the inner width and height of the graph\n  const { width, height } = graphDimension;\n\n  // sort the data\n  const sortedData = useMemo(\n    () => {\n      const getValue = getValByScaleType(x.scale);\n      const getOriginalVal = (record: object) => getValue(record[x.field]);\n\n      return (\n        data.sort(\n          (rowA, rowB) => getOriginalVal(rowA) - getOriginalVal(rowB),\n        )\n      );\n    },\n    [data, x],\n  );\n\n  // groups the data by colors\n  const dataGroups = useMemo(\n    () => {\n      const encodings = [color].filter((encoding): encoding is Encoding => !!encoding);\n      return getDataGroupByEncodings(sortedData, encodings);\n    },\n    [color, sortedData],\n  );\n\n  // the scales and configs of the axis based on its encodings\n  const xAxis = useMemo(\n    () => {\n      const axisScale = getXAxisScale({\n        data,\n        axisLength: width,\n        encoding: x,\n      });\n\n      // update the domain if the domains of x-y scales is band-linear\n      if (x.scale === 'linear' && y.scale === 'band') {\n        axisScale.scale.domain(getLinearDomainFromDataGroup(dataGroups, y.field, x.field));\n      }\n      return axisScale;\n    },\n    [data, width, x],\n  );\n  const yAxis = useMemo(\n    () => {\n      const axisScale = getYAxisScale({\n        data,\n        axisLength: height,\n        encoding: y,\n      });\n\n      // update the domain if the domains of x-y scales is linear-band\n      if (x.scale === 'band' && y.scale === 'linear') {\n        axisScale.scale.domain(getLinearDomainFromDataGroup(dataGroups, x.field, y.field));\n      }\n      return axisScale;\n    },\n    [data, height, y],\n  );\n\n  // selectors to get the original/scaled/formatted values\n  const xSelector = useMemo(\n    () => getRecordFieldSelector(xAxis),\n    [xAxis],\n  );\n  const ySelector = useMemo(\n    () => getRecordFieldSelector(yAxis),\n    [yAxis],\n  );\n\n  // handle the colors\n  const colorScale = useMemo(\n    () => {\n      if (typeof color === 'undefined') {\n        return null;\n      }\n      return getColorScale({\n        data,\n        encoding: color,\n        colors: theme.colors,\n      });\n    },\n    [color, data, theme.colors],\n  );\n  const defaultColor = theme.colors.category[0];\n  const getColorString = useMemo(\n    () => (\n      colorScale\n      ? getRecordFieldSelector(colorScale).getScaledVal\n      : () => defaultColor\n    ),\n    [colorScale, defaultColor],\n  );\n\n  const axisProjectedValues: AxisProjectedValue[] = useMemo(\n    () => {\n      return getAxisProjectedValues(dataGroups, xSelector, ySelector, getColorString);\n    },\n    [dataGroups, xSelector, ySelector, getColorString],\n  );\n\n  return {\n    /** Array of data grouped by fields of colors  */\n    dataGroups,\n\n    /**\n     * The y-values in the `dataGroups` grouped by projected x values.\n     * -  Structure of groupedY: \"groupedY\":[ { \"index of dataGroup\": \"value\" }, ... ]\n     * @example\n     * [{\n     *  \"xPos\": 0,\n     *  \"xStrVal\": \"0\",\n     *  \"groupedY\": [{\"groupIdx\": 0, \"yStrVal\": 9, \"yPos\": 18, \"color\": \"#deebf7\"}],\n     *  },\n     * {\n     *  \"xPos\": 109.12812500000001,\n     *  \"xStrVal\": \"2\",\n     *  \"groupedY\": [{\"groupIdx\": 0, \"yStrVal\": 3, \"yPos\": 6, \"color\": \"#deebf7\"}, ...],\n     * }]\n     */\n    axisProjectedValues,\n\n    /** d3 scale functions and other related configurations computed for various encodings */\n    scalesConfig: {\n      /** scale function and configs for x-axis */\n      x: xAxis,\n\n      /** scale function and configs for y-axis */\n      y: yAxis,\n\n      /** scale function and configs for the color scale; null if there is no color encoding */\n      color: colorScale,\n    },\n\n    /** Contains functions to select values from a data row */\n    rowValSelectors: {\n      /** Functions to get value on the x-axis */\n      x: xSelector,\n\n      /** Functions to get value on the y-axis */\n      y: ySelector,\n\n      /** Functions to get colors */\n      color: {\n        /** Function to get the color string */\n        getString: getColorString,\n      },\n    },\n  };\n};\n","import React, { useContext } from 'react';\nimport {\n  // from AxisLayer\n  AxisLayer,\n  // from Overlays\n  HeaderBox,\n  HeaderBoxProps,\n  // from common types\n  AxisScale,\n  Margin,\n  GraphDimension,\n  AxisEncoding,\n  // theme\n  ThemeContext,\n  GlobalTheme,\n  // styled-components\n  styled,\n} from '@ichef/transcharts-graph';\n\nexport interface FrameContentProps {\n  /** Width and height of the outer container including the margin */\n  outerDimension: GraphDimension;\n\n  /** Width and height of the graph to be drawed inside the SVG group */\n  graphDimension: GraphDimension;\n\n  /** Axis encoding of x-axis */\n  x: AxisEncoding;\n\n  /** Axis encoding of y-axis */\n  y: AxisEncoding;\n\n  /** Margin between the inner graph area and the outer svg */\n  margin: Margin;\n\n  /** It determines how the axes are drawn */\n  data: object[];\n\n  /** Should show the axis on the left or not */\n  showLeftAxis: boolean;\n\n  /** Should show the axis on the bottom or not */\n  showBottomAxis: boolean;\n\n  /** Whether to display the axes in the background or foreground of the chart */\n  axisInBackground: boolean;\n\n  scalesConfig: {\n    x: AxisScale,\n    y: AxisScale,\n  };\n\n  /** Elements to be overlayed on top of the SVG */\n  svgOverlay?: React.ReactNode;\n\n  /** Elements to be drawed inside of the SVG */\n  children: React.ReactNode;\n}\nexport interface SvgFrameProps extends FrameContentProps {\n  /** Ref to <HeaderBox> */\n  titleRef: React.RefObject<HTMLDivElement>;\n\n  /** Title of <HeaderBox> */\n  title?: HeaderBoxProps['title'];\n\n  /** Description of <HeaderBox> */\n  titleDesc?: HeaderBoxProps['desc'];\n\n  /** Text align of the header box */\n  titleAlign?: HeaderBoxProps['align'];\n}\n\nconst defaultProps = {\n  showLeftAxis: true,\n  showBottomAxis: true,\n  axisInBackground: true,\n};\n\nconst Wrapper = styled.div<GlobalTheme>`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  color: ${({ fontColor }) => fontColor};\n`;\n\nconst FrameContent = ({\n  outerDimension,\n  graphDimension,\n  x,\n  y,\n  margin,\n  data,\n  scalesConfig,\n  showLeftAxis,\n  showBottomAxis,\n  axisInBackground,\n  svgOverlay,\n  children,\n}: FrameContentProps) => {\n  const { width: outerWidth, height: outerHeight } = outerDimension;\n  const { width: graphWidth, height: graphHeight } = graphDimension;\n  const axisLayer = (\n    <AxisLayer\n      width={graphWidth}\n      height={graphHeight}\n      showLeftAxis={showLeftAxis}\n      showBottomAxis={showBottomAxis}\n      data={data}\n      x={x}\n      y={y}\n      xAxisScale={scalesConfig.x.scale}\n      yAxisScale={scalesConfig.y.scale}\n    />\n  );\n\n  return (\n    <>\n      <svg width={outerWidth} height={outerHeight}>\n        <g transform={`translate(${margin.left}, ${margin.top})`}>\n          {axisInBackground ? (<>{axisLayer}{children}</>) : (<>{children}{axisLayer}</>)}\n        </g>\n      </svg>\n      {svgOverlay}\n    </>\n  );\n};\nFrameContent.defaultProps = defaultProps;\n\n/**\n * It manages the size of the chart container, SVG, and the axes\n * that generally used across different charts.\n */\nexport const SvgWithAxisFrame = React.forwardRef<\n  HTMLDivElement,\n  JSX.LibraryManagedAttributes<typeof FrameContent, SvgFrameProps>\n>(({\n  titleRef,\n  title,\n  titleDesc,\n  titleAlign,\n  ...restProps\n}, ref) => {\n  const theme = useContext(ThemeContext);\n  const { globalStyle } = theme;\n\n  return (\n    <Wrapper\n      ref={ref}\n      {...globalStyle}\n    >\n      <FrameContent {...restProps} />\n      <HeaderBox\n        ref={titleRef}\n        title={title}\n        desc={titleDesc}\n        align={titleAlign}\n      />\n    </Wrapper>\n  );\n});\n","import React, { useContext, useMemo } from 'react';\nimport { LinePath } from '@vx/shape';\nimport {\n  // from HoverLayer\n  HoverLayer,\n  // from hooks\n  useHoverState,\n  // from TooltipLayer\n  TooltipLayer,\n  AxisProjectedValue,\n  // from Legend,\n  LegendGroup,\n  // from common types\n  FieldSelector,\n  // from themes\n  Theme,\n  ThemeContext,\n} from '@ichef/transcharts-graph';\n\nimport { useChartDimensions } from '../hooks/useChartDimensions';\nimport { useCartesianEncodings } from '../hooks/useCartesianEncodings';\nimport { SvgWithAxisFrame } from '../frames/SvgWithAxisFrame';\nimport { DEFAULT_VALS } from '../common/config';\nimport { CommonChartProps } from '../common/types';\n\n/**\n * Return the position of the hovering detection rect.\n * If the given index exceeds its bound, it will return its closest value.\n */\nfunction getXPosByIndex(arr: AxisProjectedValue[], idx: number) {\n  let arrIdx = idx < 0 ? 0 : idx;\n  if (idx >= arr.length) {\n    arrIdx = arr.length - 1;\n  }\n  return arr[arrIdx].xPos;\n}\n\nexport type LineChartProps = CommonChartProps;\n\n/** A line and a dot for the point being hovered */\nconst HoveringIndicator = ({ hovering, projectedPoints, height }: {\n  hovering: boolean,\n  projectedPoints: AxisProjectedValue,\n  height: number,\n}) => {\n  if (!hovering) {\n    return null;\n  }\n\n  const circles = projectedPoints.groupedY.map(pointY => (\n    <circle\n      key={`c-${pointY.yStrVal}`}\n      cx={projectedPoints.xPos}\n      cy={pointY.yPos}\n      r={4.5}\n      fill={pointY.color}\n    />\n  ));\n\n  return(\n    <>\n      <line\n        x1={projectedPoints.xPos}\n        y1={0}\n        x2={projectedPoints.xPos}\n        y2={height}\n        style={{ stroke:'rgba(124, 137, 147, 0.25)', strokeWidth: 2 }}\n      />\n      {circles}\n    </>\n  );\n};\n\nconst DataLine = ({ color, xSelector, ySelector, rows }: {\n  color: string,\n  xSelector: FieldSelector,\n  ySelector: FieldSelector,\n  rows: object[],\n}) => {\n  const lineDots = rows.map((dataRow, index) => (\n    <circle\n      key={`c-${index}`}\n      cx={xSelector.getScaledVal(dataRow)}\n      cy={ySelector.getScaledVal(dataRow)}\n      r={3.5}\n      fill={color}\n    />\n  ));\n  return (\n    <>\n      {/* Draw the line */}\n      <LinePath\n        data={rows}\n        x={xSelector.getScaledVal}\n        y={ySelector.getScaledVal}\n        stroke={color}\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n\n      {/* Draw dots on the line */}\n      {lineDots}\n    </>\n  );\n};\n\nconst defaultProps = {\n  margin: DEFAULT_VALS.MARGIN,\n};\n\nexport const LineChart = ({\n  data,\n  margin,\n  x,\n  y,\n  color,\n  title,\n  titleDesc,\n  titleAlign,\n  showLeftAxis,\n  showBottomAxis,\n}: LineChartProps) => {\n  const theme = useContext<Theme>(ThemeContext);\n  const {\n    chartRef,\n    titleRef,\n    legendRef,\n    outerDimension,\n    graphDimension,\n    graphMargin,\n  } = useChartDimensions(margin, color);\n  const { width: graphWidth, height: graphHeight } = graphDimension;\n  const { clearHovering, hovering, hoveredPoint, setHoveredPosAndIndex } = useHoverState();\n  const {\n    dataGroups,\n    scalesConfig,\n    rowValSelectors,\n    axisProjectedValues,\n  } = useCartesianEncodings(graphDimension, theme, data, x, y, color);\n\n  const graphGroup = useMemo(\n    () => (\n      dataGroups.map(\n        (rows: object[], index: number) => {\n          const colorString: string = rowValSelectors.color.getString(rows[0]);\n          return (\n            <DataLine\n              key={`row-${index}`}\n              color={colorString}\n              rows={rows}\n              xSelector={rowValSelectors.x}\n              ySelector={rowValSelectors.y}\n            />\n          );\n        }\n      )\n    ),\n    [dataGroups, rowValSelectors]\n  );\n\n  const hoverDetectionComponents = useMemo(\n    () => (\n      axisProjectedValues.map(\n        (row, idx) => {\n          const rectX = (row.xPos + getXPosByIndex(axisProjectedValues, idx - 1)) / 2;\n\n          const rectWidth = (\n            (row.xPos + getXPosByIndex(axisProjectedValues, idx + 1)) / 2\n          ) - rectX;\n\n          return (\n            <rect\n              // #TODO: use unique keys rather than array index\n              key={`colli-${idx}`}\n              x={rectX}\n              y={0}\n              width={rectWidth}\n              height={graphHeight}\n              opacity={0}\n            />\n          );\n        }\n      )\n    ),\n    [axisProjectedValues, graphHeight]\n  );\n\n  return (\n    <SvgWithAxisFrame\n      ref={chartRef}\n      titleRef={titleRef}\n      title={title}\n      titleDesc={titleDesc}\n      titleAlign={titleAlign}\n      outerDimension={outerDimension}\n      graphDimension={graphDimension}\n      showLeftAxis={showLeftAxis}\n      showBottomAxis={showBottomAxis}\n      x={x}\n      y={y}\n      margin={graphMargin}\n      data={data}\n      scalesConfig={scalesConfig}\n      svgOverlay={\n        <>\n          {/* Draw the tooltip */}\n          <TooltipLayer\n            hovering={hovering}\n            hoveredPoint={hoveredPoint}\n            axisProjectedValues={axisProjectedValues}\n            graphWidth={graphWidth}\n            graphHeight={graphHeight}\n            margin={graphMargin}\n          />\n          {/* Draw the legned */}\n          <LegendGroup\n            color={color && {\n              ...color,\n              ...scalesConfig.color!,\n            }}\n            ref={legendRef}\n          />\n        </>\n      }\n    >\n      {graphGroup}\n      <HoveringIndicator\n        hovering={hovering}\n        projectedPoints={axisProjectedValues[hoveredPoint.index]}\n        height={graphHeight}\n      />\n\n      {/* Areas which are used to detect mouse or touch interactions */}\n      <HoverLayer\n        setHoveredPosAndIndex={setHoveredPosAndIndex}\n        clearHovering={clearHovering}\n        hoverDetectionComponents={hoverDetectionComponents}\n      />\n    </SvgWithAxisFrame>\n  );\n};\nLineChart.defaultProps = defaultProps;\n","import React, { useContext, useMemo, useCallback } from 'react';\nimport { ScaleBand, ScaleLinear } from 'd3-scale';\nimport {\n  // from HoverLayer\n  HoverLayer,\n  // from hooks\n  useHoverState,\n  // from TooltipLayer\n  TooltipLayer,\n  // from Legend,\n  LegendGroup,\n  // from common types\n  AxisEncoding,\n  // from themes\n  Theme,\n  ThemeContext,\n} from '@ichef/transcharts-graph';\n\nimport { useChartDimensions } from '../hooks/useChartDimensions';\nimport { useCartesianEncodings } from '../hooks/useCartesianEncodings';\nimport { SvgWithAxisFrame } from '../frames/SvgWithAxisFrame';\nimport { DEFAULT_VALS } from '../common/config';\nimport { CommonChartProps } from '../common/types';\n\n/** A line and a dot for the point being hovered */\nconst HoveringIndicator = ({ hovering, x, y, width, height }: {\n  hovering: boolean,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n}) => {\n  if (!hovering) {\n    return null;\n  }\n\n  return(\n    <rect\n      x={x}\n      y={y}\n      width={width}\n      height={height}\n      opacity={0.5}\n      fill=\"rgba(124, 137, 147, 0.25)\"\n    />\n  );\n};\n\nexport interface BarChartProps extends CommonChartProps {\n  /** Ratio of the paddings between bars */\n  paddingInner: number;\n}\n\nconst defaultProps = {\n  margin: DEFAULT_VALS.MARGIN,\n  paddingInner: 0.1,\n};\n\nexport const BarChart = ({\n  data,\n  // FIXME: remove the default margin after fixing the defaultProps of`<SvgWithAxisFrame>`\n  margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 60,\n  },\n  x,\n  y,\n  color,\n  title,\n  titleDesc,\n  titleAlign,\n  showLeftAxis,\n  showBottomAxis,\n  paddingInner = 0.1,\n}: BarChartProps) => {\n  const theme = useContext<Theme>(ThemeContext);\n  const {\n    chartRef,\n    titleRef,\n    legendRef,\n    outerDimension,\n    graphDimension,\n  } = useChartDimensions(margin);\n  const { width: graphWidth, height: graphHeight } = graphDimension;\n\n  const xEncoding: AxisEncoding = { ...x, scale: 'band', scaleConfig: {\n    paddingInner,\n  }};\n  const yEncoding: AxisEncoding = { ...y, scale: 'linear' };\n  const {\n    dataGroups,\n    scalesConfig,\n    rowValSelectors,\n    axisProjectedValues,\n  } = useCartesianEncodings(graphDimension, theme, data, xEncoding, yEncoding, color);\n  const { clearHovering, hovering, hoveredPoint, setHoveredPosAndIndex } = useHoverState();\n\n  const bandScale = scalesConfig.x.scale as ScaleBand<any>;\n  const linearScale = scalesConfig.y.scale as ScaleLinear<any, any>;\n  const bandWidth = bandScale.bandwidth();\n\n  /**\n   * Returns the size and position of the hovering detection rectangle\n   * or hovering highlight rectangle\n   */\n  const getHoveringRectPos = useCallback(\n    (idx: number) => {\n      const paddingVal = bandWidth * paddingInner;\n      const xPos = idx === 0\n        ? 0\n        : axisProjectedValues[idx].xPos - paddingVal / 2;\n      const width = idx === 0 || idx === data.length - 1\n            ? bandWidth + paddingVal / 2\n            : bandWidth + paddingVal;\n\n      return {\n        width,\n        height: graphHeight,\n        x: xPos,\n        y: 0,\n      };\n    },\n    [bandWidth, paddingInner],\n  );\n\n  const hoverDetectionComponents = useMemo(\n    () => (\n      axisProjectedValues.map(\n        (row, idx) => {\n          return (\n            <rect\n              // #TODO: use unique keys rather than array index\n              key={`colli-${idx}`}\n              x={row.xPos}\n              y={0}\n              height={graphHeight}\n              width={bandWidth}\n              opacity={0}\n              {...{ ...getHoveringRectPos(idx) }}\n            />\n          );\n        }\n      )\n    ),\n    [axisProjectedValues, graphHeight, bandWidth, getHoveringRectPos]\n  );\n\n  const graphGroup = useMemo(\n    () => {\n      const baseY = linearScale(0);\n\n      // calculate the accumulated y position of certain points\n      const positiveY = {};\n      const nonPositiveY = {};\n      const getAccumY = (xPos: number, scaledY: number) => {\n        if (scaledY >= 0) {\n          if (!positiveY[xPos]) {\n            positiveY[xPos] = baseY;\n          }\n          positiveY[xPos] -= scaledY;\n          return positiveY[xPos];\n        }\n\n        // scaledY < 0\n        const yPos = !nonPositiveY[xPos] ? baseY : nonPositiveY[xPos];\n        nonPositiveY[xPos] = yPos - scaledY;\n        return yPos;\n      };\n\n      return dataGroups.map(\n        (rows: object[], groupIdx: number) => {\n          return rows.map((row: object, rowIdx: number) => {\n            const colorString: string = rowValSelectors.color.getString(rows[0]);\n            const xPos = rowValSelectors.x.getScaledVal(row);\n            const scaledY = rowValSelectors.y.getScaledVal(row);\n            const height = scaledY >= 0\n              ? baseY - scaledY\n              : baseY - graphHeight - scaledY;\n\n            return (\n              <rect\n                key={`bar-${rowIdx}`}\n                x={xPos}\n                y={getAccumY(xPos, height)}\n                width={bandWidth}\n                height={Math.abs(height)}\n                fill={colorString}\n              />\n            );\n          });\n        }\n      );\n    },\n    [dataGroups, scalesConfig, rowValSelectors],\n  );\n\n  return (\n    <SvgWithAxisFrame\n      ref={chartRef}\n      titleRef={titleRef}\n      title={title}\n      titleDesc={titleDesc}\n      titleAlign={titleAlign}\n      outerDimension={outerDimension}\n      graphDimension={graphDimension}\n      showLeftAxis={showLeftAxis}\n      showBottomAxis={showBottomAxis}\n      x={x}\n      y={y}\n      // put the axes on top of the bars\n      axisInBackground={false}\n      margin={margin}\n      data={data}\n      scalesConfig={scalesConfig}\n      svgOverlay={\n        <>\n          {/* Draw the tooltip */}\n          <TooltipLayer\n            hovering={hovering}\n            hoveredPoint={hoveredPoint}\n            axisProjectedValues={axisProjectedValues}\n            graphWidth={graphWidth}\n            graphHeight={graphHeight}\n            margin={margin}\n            xOffset={bandWidth / 2}\n          />\n          {/* Draw the legned */}\n          <LegendGroup\n            color={color && {\n              ...color,\n              ...scalesConfig.color!,\n            }}\n            ref={legendRef}\n          />\n        </>\n      }\n    >\n      {graphGroup}\n      <HoveringIndicator\n        hovering={hovering}\n        {...{ ...getHoveringRectPos(hoveredPoint.index) }}\n      />\n\n      {/* Areas which are used to detect mouse or touch interactions */}\n      <HoverLayer\n        setHoveredPosAndIndex={setHoveredPosAndIndex}\n        clearHovering={clearHovering}\n        hoverDetectionComponents={hoverDetectionComponents}\n      />\n    </SvgWithAxisFrame>\n  );\n};\nBarChart.defaultProps = defaultProps;\n","export * from './common/config';\nexport * from './hooks/useChartDimensions';\nexport * from './hooks/useCartesianEncodings';\nexport * from './line/LineChart';\nexport * from './bar/BarChart';\nexport * from './frames/SvgWithAxisFrame';\nexport * from './utils/getInnerGraphDimensionAndMargin';\n"],"sourceRoot":""}