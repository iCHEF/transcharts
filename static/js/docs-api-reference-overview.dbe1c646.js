(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{"./docs/api-reference/Overview.mdx":function(e,n,t){"use strict";t.r(n),t.d(n,"default",function(){return l});var a=t("./node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js"),o=(t("./node_modules/react/index.js"),t("./node_modules/@mdx-js/react/dist/index.es.js")),i={},r="wrapper";function l(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(o.b)(r,Object.assign({},i,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"making-your-own-charts"},"Making Your Own Charts"),Object(o.b)("p",null,"You can utilize the ",Object(o.b)("inlineCode",{parentName:"p"},"@ichef/transcharts-graph")," and ",Object(o.b)("inlineCode",{parentName:"p"},"@ichef/transcharts-chart")," packages to create charts with X and Y axis."),Object(o.b)("h2",{id:"calculate-chart-dimensions"},"Calculate Chart Dimensions"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"useChartDimensions")," lets you get the ",Object(o.b)("inlineCode",{parentName:"p"},"outerDimension")," and ",Object(o.b)("inlineCode",{parentName:"p"},"graphDimension"),"."),Object(o.b)("p",null,"By attaching the ref to the outer chart (",Object(o.b)("inlineCode",{parentName:"p"},"chartRef"),"), the ref to the title box (",Object(o.b)("inlineCode",{parentName:"p"},"titleRef"),"), the legend (",Object(o.b)("inlineCode",{parentName:"p"},"legendRef"),"), and the inner margin of the chart,\nit calcultates the following dimensions:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Full dimension of the chart: ",Object(o.b)("inlineCode",{parentName:"li"},"outerDimension")," (see the blue text on the graph below)"),Object(o.b)("li",{parentName:"ul"},"Inner dimension of the chart: ",Object(o.b)("inlineCode",{parentName:"li"},"graphDimension")," (see the orange text on the graph below)")),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"  const {\n    chartRef,\n    titleRef,\n    legendRef,\n    outerDimension,\n    graphDimension,\n  } = useChartDimensions(margin);\n")),Object(o.b)("p",null,Object(o.b)("img",{alt:"Transchart_Dimension",src:"https://user-images.githubusercontent.com/1139698/61859951-b64c7880-aefb-11e9-9f5a-f6e4b1929c23.png"})),Object(o.b)("p",null,"It calculates the width and height of a component using ",Object(o.b)("inlineCode",{parentName:"p"},"useContainerDimension")," hook of the graph package."),Object(o.b)("h2",{id:"svgwithaxisframe"},"SvgWithAxisFrame"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"<SvgWithAxisFrame>")," is the component that draws the following basics components of a chart for you:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"The title and description of the chart (",Object(o.b)("inlineCode",{parentName:"li"},"<HeaderBox>"),")"),Object(o.b)("li",{parentName:"ul"},"The SVG to draw the chart along with the X and Y axes (the axes are drawn using ",Object(o.b)("inlineCode",{parentName:"li"},"<AxisLayer>"),")."),Object(o.b)("li",{parentName:"ul"},"The transformed inner SVG element container ",Object(o.b)("inlineCode",{parentName:"li"},"<g>")," to draw the main SVG components  (yellow area on the chart above).")),Object(o.b)("p",null,"Pass the following props to draw a chart:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"children"),": the main SVG components like the bars, lines, or dots to be drawn on the transformed inner SVG element container ",Object(o.b)("inlineCode",{parentName:"li"},"<g>")," (yellow area on the chart above)."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"svgOverlay"),": the non-SVG components like the tooltip and legend.")),Object(o.b)("p",null,"You may refer to the source code of ",Object(o.b)("inlineCode",{parentName:"p"},"<LineChart>")," or ",Object(o.b)("inlineCode",{parentName:"p"},"<BarChart>")," as an example."),Object(o.b)("h2",{id:"add-tooltipshovering-effects"},"Add Tooltips/Hovering Effects"),Object(o.b)("p",null,Object(o.b)("img",{alt:"Tooltip_transchart",src:"https://user-images.githubusercontent.com/1139698/61932715-aa71bc80-afb6-11e9-9606-4e71acecfff7.png"})),Object(o.b)("p",null,"To detect the mouse and touch events, you can add a ",Object(o.b)("inlineCode",{parentName:"p"},"<HoverLayer>")," component\nin which you can put ",Object(o.b)("inlineCode",{parentName:"p"},"hoverDetectionComponents")," which are an array of transparent svg elements to be attached with the mouse and touch events."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"<HoverLayer>")," detects the X and Y position and the index of the ",Object(o.b)("inlineCode",{parentName:"p"},"hoverDetectionComponents")," array are being hovered,\nand sets such information using the passed in prop ",Object(o.b)("inlineCode",{parentName:"p"},"setHoveredPosAndIndex(...)"),".\nIt also calls the passed in ",Object(o.b)("inlineCode",{parentName:"p"},"clearHovering()")," to clear the hovering index when users hover/touch out of the regions of ",Object(o.b)("inlineCode",{parentName:"p"},"hoverDetectionComponents"),"."),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"setHoveredPosAndIndex(...)")," and ",Object(o.b)("inlineCode",{parentName:"p"},"clearHovering()")," can be gotten from ",Object(o.b)("inlineCode",{parentName:"p"},"useHoverState")," hook\nwhich also lets you get ",Object(o.b)("inlineCode",{parentName:"p"},"hovering")," (whether users are hovering/touching the ",Object(o.b)("inlineCode",{parentName:"p"},"hoverDetectionComponents"),")\nand ",Object(o.b)("inlineCode",{parentName:"p"},"hoveredPoint")," (the index of ",Object(o.b)("inlineCode",{parentName:"p"},"hoverDetectionComponents")," and the X and Y position)."),Object(o.b)("p",null,"You can use ",Object(o.b)("inlineCode",{parentName:"p"},"hovering")," and ",Object(o.b)("inlineCode",{parentName:"p"},"hoverDetectionComponents")," to create the visual hovering effect or add tooltips."),Object(o.b)("p",null,"To draw the tooltip, there is ",Object(o.b)("inlineCode",{parentName:"p"},"<TooltipLayer>")," to help you create it with ease."),Object(o.b)("h3",{id:"usecartesianencodings"},"useCartesianEncodings"),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"useCartesianEncodings")," is a hook of the ",Object(o.b)("inlineCode",{parentName:"p"},"chart")," library aimed to isolating the data transformation and computing\nshared across most charts with the X and Y axes."),Object(o.b)("p",null,"It groups the data based on the provided color encoding and computes the d3 scale functions\nfor the X and Y axis along with the color scale."),Object(o.b)("p",null,"It is currently used by ",Object(o.b)("inlineCode",{parentName:"p"},"<LineChart>")," and ",Object(o.b)("inlineCode",{parentName:"p"},"<BarChart>"),"."),Object(o.b)("h4",{id:"input-of-usecartesianencodings"},"Input of useCartesianEncodings"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"graphDimension"),": Width and height of the inner graph (does not contain axes, legend, etc...)"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"theme"),": Theme of the chart, used for the generation of the color scale"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"data"),": Array of rows of data"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"x"),": Field and data type of x-axis"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"y"),": Field and data type of y-axis"),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"color?"),": Fields and definitions for colors; pass in ",Object(o.b)("inlineCode",{parentName:"li"},"undefined")," if you are intended to draw single color."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"drawFromXAxis"),": Whether the graph is drawn from the x-axis, i.e., vertical graph. In a transposed (horizontal) graph, you have to set it as false, in order to get the right ",Object(o.b)("inlineCode",{parentName:"li"},"axisProjectedValues")," value.")),Object(o.b)("h4",{id:"output-of-usecartesianencodings"},"Output of useCartesianEncodings"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"dataGroups"),": Array of data grouped by fields of colors.")),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'[\n  [\n    {\n      "restaurant": "Cafe",\n      "type": "Beer",\n      "sales": 100\n    },\n    {\n      "restaurant": "Tea Time",\n      "type": "Beer",\n      "sales": 150\n    }\n  ],\n  [\n    {\n      "restaurant": "Tea Time",\n      "type": "Black Tea",\n      "sales": 300\n    },\n    {\n      "restaurant": "Bistro",\n      "type": "Black Tea",\n      "sales": 500\n    }\n  ],\n  ...\n]\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"axisProjectedValues"),": The y-values in the ",Object(o.b)("inlineCode",{parentName:"li"},"dataGroups")," grouped by projected x values. It is useful for displaying the tooltips.")),Object(o.b)("p",null,"Example:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "basePos": 0,\n    "baseStrVal": "Bistro",\n    "projectedVals": [\n      {\n        "groupIdx": 1,\n        "projectedStrVal": 500,\n        "projectedPos": 281.0807291666667,\n        "color": "#ff7f0e"\n      },\n      {\n        "groupIdx": 2,\n        "projectedStrVal": 700,\n        "projectedPos": 393.51302083333337,\n        "color": "#2ca02c"\n      }\n    ]\n  },\n  {\n    "basePos": 88.27586206896552,\n    "baseStrVal": "Tea Time",\n    "projectedVals": [\n      {\n        "groupIdx": 0,\n        "projectedStrVal": 150,\n        "projectedPos": 84.32421875,\n        "color": "#1f77b4"\n      },\n      {\n        "groupIdx": 1,\n        "projectedStrVal": 300,\n        "projectedPos": 168.6484375,\n        "color": "#ff7f0e"\n      },\n      {\n        "groupIdx": 2,\n        "projectedStrVal": 200,\n        "projectedPos": 112.43229166666666,\n        "color": "#2ca02c"\n      }\n    ]\n  },\n  ...\n]\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"scalesConfig"),": d3 scale functions and other related configurations computed for various encodings.\nIt contains keys of objects of the encodings of ",Object(o.b)("inlineCode",{parentName:"p"},"x")," and ",Object(o.b)("inlineCode",{parentName:"p"},"y")," axes as well as the ",Object(o.b)("inlineCode",{parentName:"p"},"color")," (if exists)."),Object(o.b)("p",{parentName:"li"},"  The inner keys of the encodings:"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"field"),": Name of the selected column from the data."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"type"),": The data encoding type passed in from the props of the chart (",Object(o.b)("inlineCode",{parentName:"li"},"'nominal' | 'ordinal' | 'quantitative' | 'temporal'"),")."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"scaleType"),": Converted d3 scaled name which is determined by the chart component."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"domain"),": Calculated domain based on the ",Object(o.b)("inlineCode",{parentName:"li"},"scaleType"),"."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"range"),": Range related to the visual space.")))),Object(o.b)("p",null,"Exmaple:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "x": {\n    "field": "restaurant",\n    "range": [\n      0,\n      674.734375\n    ],\n    "domain": [\n      "Cafe",\n      "Tea Time",\n      "Bistro",\n      "Cafe",\n      "Tea Time",\n      "Tea Time",\n      "Bistro"\n    ],\n    "scaleType": "band",\n    "type": "nominal"\n  },\n  "y": {\n    "field": "sales",\n    "range": [\n      256,\n      0\n    ],\n    "domain": [\n      0,\n      1200\n    ],\n    "scaleType": "linear",\n    "type": "quantitative"\n  },\n  "color": {\n    "domain": [\n      "Beer",\n      "Black Tea",\n      "Black Tea",\n      "Wine",\n      "Wine",\n      "Beer",\n      "Wine"\n    ],\n    "type": "nominal",\n    "field": "type",\n    "range": [\n      "#1f77b4",\n      "#ff7f0e",\n      "#2ca02c",\n      "#d62728",\n      "#9467bd",\n      "#8c564b",\n      "#e377c2",\n      "#7f7f7f",\n      "#bcbd22",\n      "#17becf"\n    ],\n    "scaleType": "ordinal"\n  }\n}\n')),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("strong",{parentName:"p"},"rowValSelectors"),": Contains functions to select values from a data row."),Object(o.b)("p",{parentName:"li"},"The inner keys of the x and y encodings contains the following:"),Object(o.b)("ul",{parentName:"li"},Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"getFormattedStringVal"),": Funtion helps you get the string to be displayed on tooltips from a data row."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"getOriginalVal"),": Funtion helps you get the original data from a data row."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"getScaledVal"),": Given a record of data, it returns the mapped value (computed by d3 scale function) of the specified field.")))),Object(o.b)("p",null,"Exmaple:"),Object(o.b)("pre",null,Object(o.b)("code",Object.assign({parentName:"pre"},{className:"language-json"}),'{\n  "color": {\n    "getString": function,\n  },\n  "x": {\n    "getFormattedStringVal": function,\n    "getOriginalVal": function,\n    "getScaledVal" function\n  }\n}\n')))}l&&l===Object(l)&&Object.isExtensible(l)&&Object.defineProperty(l,"__filemeta",{enumerable:!0,configurable:!0,value:{name:"MDXContent",filename:"docs/api-reference/Overview.mdx"}}),l.isMDXComponent=!0}}]);
//# sourceMappingURL=docs-api-reference-overview.d7ea86574c57c9ee8588.js.map