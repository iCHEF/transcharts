{"version":3,"sources":["/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/docs/sampleData/gapMinderData.js","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/common/config.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/utils/getInnerGraphDimensionAndMargin.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/hooks/useChartDimensions.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/utils/getAxisProjectedValues.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/hooks/useCartesianEncodings.ts","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/frames/SvgWithAxisFrame.tsx","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/line/LineChart.tsx","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/bar/BarChart.tsx","/Users/hsunpeiwang/Documents/Projects/iChef/transcharts/packages/chart/src/index.ts"],"names":["__webpack_require__","d","__webpack_exports__","taiwanData","country","continent","year","lifeExp","pop","gdpPercap","fiveCountries","topGdpPercap","DEFAULT_VALS","MARGIN","top","right","bottom","left","DEFAULT_LENGTH","getInnerGraphDimensionAndMargin","dimension","margin","headerDimension","legendDimension","legendOrient","outerWidth","width","outerHeight","height","graphWidth","graphHeight","graphMargin","Object","objectSpread","graphDimension","useChartDimensions","arguments","length","undefined","color","chartRef","useRef","legendRef","titleRef","outerDimension","useContainerDimension","legend","orient","_useMemo","useMemo","getAxisProjectedValues","dataGroups","xSelector","ySelector","getColorString","projections","xPositions","forEach","group","groupIdx","row","xStrVal","getFormattedStringVal","yStrVal","xPos","getScaledVal","yPos","push","keys","reduce","accum","groupedY","column","concat","toConsumableArray","sort","a","b","getLinearDomainFromDataGroup","keyField","valueField","aggreatedMax","aggreatedMin","data","key","val","Math","min","apply","values","max","useCartesianEncodings","theme","x","y","sortedData","getValue","getValByScaleType","scale","getOriginalVal","record","field","rowA","rowB","encodings","filter","encoding","getDataGroupByEncodings","xAxis","axisScale","getXAxisScale","axisLength","domain","yAxis","getYAxisScale","getRecordFieldSelector","colorScale","getColorScale","colors","defaultColor","category","axisProjectedValues","scalesConfig","rowValSelectors","getString","Wrapper","styled","div","_templateObject","_ref","fontColor","FrameContent","_ref2","showLeftAxis","showBottomAxis","axisInBackground","svgOverlay","children","axisLayer","react_default","createElement","src","xAxisScale","yAxisScale","Fragment","transform","defaultProps","SvgWithAxisFrame","React","forwardRef","_ref3","ref","title","titleDesc","titleAlign","restProps","objectWithoutProperties","globalStyle","useContext","ThemeContext","assign","SvgWithAxisFrame_FrameContent","desc","align","getXPosByIndex","arr","idx","arrIdx","HoveringIndicator","hovering","projectedPoints","circles","map","pointY","cx","cy","r","fill","x1","y1","x2","y2","style","stroke","strokeWidth","DataLine","rows","lineDots","dataRow","index","vx_shape_es","strokeLinecap","strokeLinejoin","LineChart","_useChartDimensions","_useHoverState","useHoverState","clearHovering","hoveredPoint","setHoveredPosAndIndex","_useCartesianEncoding","graphGroup","colorString","LineChart_DataLine","hoverDetectionComponents","rectX","rectWidth","opacity","LineChart_HoveringIndicator","paddingInner","BarChart","_ref2$margin","_ref2$paddingInner","xEncoding","scaleConfig","yEncoding","bandScale","linearScale","bandWidth","bandwidth","getHoveringRectPos","useCallback","paddingVal","baseY","positiveY","nonPositiveY","getAccumY","scaledY","rowIdx","abs","xOffset","BarChart_HoveringIndicator","LineChart_LineChart","BarChart_BarChart"],"mappings":"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","file":"static/js/docs-chart-settings-title~docs-charts-line-chart~docs-index.d2d24dac.js","sourcesContent":["/**\n * Downloaded using: gapminder package in R (https://cran.r-project.org/web/packages/gapminder/README.html)\n * Should pay attribution to https://www.gapminder.org/ when using it,\n * since it's licensed under Creative Commons Attribution 3.0 license.\n */\n\n// Data of Taiwan since 1960\nexport const taiwanData = [\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1962,\n    lifeExp: 65.2,\n    pop: 11918938,\n    gdpPercap: 1822.879,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1967,\n    lifeExp: 67.5,\n    pop: 13648692,\n    gdpPercap: 2643.8587,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1972,\n    lifeExp: 69.39,\n    pop: 15226039,\n    gdpPercap: 4062.5239,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1977,\n    lifeExp: 70.59,\n    pop: 16785196,\n    gdpPercap: 5596.5198,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1982,\n    lifeExp: 72.16,\n    pop: 18501390,\n    gdpPercap: 7426.3548,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1987,\n    lifeExp: 73.4,\n    pop: 19757799,\n    gdpPercap: 11054.5618,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1992,\n    lifeExp: 74.26,\n    pop: 20686918,\n    gdpPercap: 15215.6579,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1997,\n    lifeExp: 75.25,\n    pop: 21628605,\n    gdpPercap: 20206.821,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 2002,\n    lifeExp: 76.99,\n    pop: 22454239,\n    gdpPercap: 23235.4233,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 2007,\n    lifeExp: 78.4,\n    pop: 23174294,\n    gdpPercap: 28718.2768,\n  },\n];\n\n// Data of Taiwan, France, Japan, United States, and Singapore since 1960\nexport const fiveCountries = [\n  {\n    country: 'France',\n    continent: 'Europe',\n    year: 1962,\n    lifeExp: 70.51,\n    pop: 47124000,\n    gdpPercap: 10560.4855,\n  },\n  {\n    country: 'France',\n    continent: 'Europe',\n    year: 1967,\n    lifeExp: 71.55,\n    pop: 49569000,\n    gdpPercap: 12999.9177,\n  },\n  {\n    country: 'France',\n    continent: 'Europe',\n    year: 1972,\n    lifeExp: 72.38,\n    pop: 51732000,\n    gdpPercap: 16107.1917,\n  },\n  {\n    country: 'France',\n    continent: 'Europe',\n    year: 1977,\n    lifeExp: 73.83,\n    pop: 53165019,\n    gdpPercap: 18292.6351,\n  },\n  {\n    country: 'France',\n    continent: 'Europe',\n    year: 1982,\n    lifeExp: 74.89,\n    pop: 54433565,\n    gdpPercap: 20293.8975,\n  },\n  {\n    country: 'France',\n    continent: 'Europe',\n    year: 1987,\n    lifeExp: 76.34,\n    pop: 55630100,\n    gdpPercap: 22066.4421,\n  },\n  {\n    country: 'France',\n    continent: 'Europe',\n    year: 1992,\n    lifeExp: 77.46,\n    pop: 57374179,\n    gdpPercap: 24703.7961,\n  },\n  {\n    country: 'France',\n    continent: 'Europe',\n    year: 1997,\n    lifeExp: 78.64,\n    pop: 58623428,\n    gdpPercap: 25889.7849,\n  },\n  {\n    country: 'France',\n    continent: 'Europe',\n    year: 2002,\n    lifeExp: 79.59,\n    pop: 59925035,\n    gdpPercap: 28926.0323,\n  },\n  {\n    country: 'France',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 80.657,\n    pop: 61083916,\n    gdpPercap: 30470.0167,\n  },\n  {\n    country: 'Japan',\n    continent: 'Asia',\n    year: 1962,\n    lifeExp: 68.73,\n    pop: 95831757,\n    gdpPercap: 6576.6495,\n  },\n  {\n    country: 'Japan',\n    continent: 'Asia',\n    year: 1967,\n    lifeExp: 71.43,\n    pop: 100825279,\n    gdpPercap: 9847.7886,\n  },\n  {\n    country: 'Japan',\n    continent: 'Asia',\n    year: 1972,\n    lifeExp: 73.42,\n    pop: 107188273,\n    gdpPercap: 14778.7864,\n  },\n  {\n    country: 'Japan',\n    continent: 'Asia',\n    year: 1977,\n    lifeExp: 75.38,\n    pop: 113872473,\n    gdpPercap: 16610.377,\n  },\n  {\n    country: 'Japan',\n    continent: 'Asia',\n    year: 1982,\n    lifeExp: 77.11,\n    pop: 118454974,\n    gdpPercap: 19384.1057,\n  },\n  {\n    country: 'Japan',\n    continent: 'Asia',\n    year: 1987,\n    lifeExp: 78.67,\n    pop: 122091325,\n    gdpPercap: 22375.9419,\n  },\n  {\n    country: 'Japan',\n    continent: 'Asia',\n    year: 1992,\n    lifeExp: 79.36,\n    pop: 124329269,\n    gdpPercap: 26824.8951,\n  },\n  {\n    country: 'Japan',\n    continent: 'Asia',\n    year: 1997,\n    lifeExp: 80.69,\n    pop: 125956499,\n    gdpPercap: 28816.585,\n  },\n  {\n    country: 'Japan',\n    continent: 'Asia',\n    year: 2002,\n    lifeExp: 82,\n    pop: 127065841,\n    gdpPercap: 28604.5919,\n  },\n  {\n    country: 'Japan',\n    continent: 'Asia',\n    year: 2007,\n    lifeExp: 82.603,\n    pop: 127467972,\n    gdpPercap: 31656.0681,\n  },\n  {\n    country: 'Singapore',\n    continent: 'Asia',\n    year: 1962,\n    lifeExp: 65.798,\n    pop: 1750200,\n    gdpPercap: 3674.7356,\n  },\n  {\n    country: 'Singapore',\n    continent: 'Asia',\n    year: 1967,\n    lifeExp: 67.946,\n    pop: 1977600,\n    gdpPercap: 4977.4185,\n  },\n  {\n    country: 'Singapore',\n    continent: 'Asia',\n    year: 1972,\n    lifeExp: 69.521,\n    pop: 2152400,\n    gdpPercap: 8597.7562,\n  },\n  {\n    country: 'Singapore',\n    continent: 'Asia',\n    year: 1977,\n    lifeExp: 70.795,\n    pop: 2325300,\n    gdpPercap: 11210.0895,\n  },\n  {\n    country: 'Singapore',\n    continent: 'Asia',\n    year: 1982,\n    lifeExp: 71.76,\n    pop: 2651869,\n    gdpPercap: 15169.1611,\n  },\n  {\n    country: 'Singapore',\n    continent: 'Asia',\n    year: 1987,\n    lifeExp: 73.56,\n    pop: 2794552,\n    gdpPercap: 18861.5308,\n  },\n  {\n    country: 'Singapore',\n    continent: 'Asia',\n    year: 1992,\n    lifeExp: 75.788,\n    pop: 3235865,\n    gdpPercap: 24769.8912,\n  },\n  {\n    country: 'Singapore',\n    continent: 'Asia',\n    year: 1997,\n    lifeExp: 77.158,\n    pop: 3802309,\n    gdpPercap: 33519.4766,\n  },\n  {\n    country: 'Singapore',\n    continent: 'Asia',\n    year: 2002,\n    lifeExp: 78.77,\n    pop: 4197776,\n    gdpPercap: 36023.1054,\n  },\n  {\n    country: 'Singapore',\n    continent: 'Asia',\n    year: 2007,\n    lifeExp: 79.972,\n    pop: 4553009,\n    gdpPercap: 47143.1796,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1962,\n    lifeExp: 65.2,\n    pop: 11918938,\n    gdpPercap: 1822.879,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1967,\n    lifeExp: 67.5,\n    pop: 13648692,\n    gdpPercap: 2643.8587,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1972,\n    lifeExp: 69.39,\n    pop: 15226039,\n    gdpPercap: 4062.5239,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1977,\n    lifeExp: 70.59,\n    pop: 16785196,\n    gdpPercap: 5596.5198,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1982,\n    lifeExp: 72.16,\n    pop: 18501390,\n    gdpPercap: 7426.3548,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1987,\n    lifeExp: 73.4,\n    pop: 19757799,\n    gdpPercap: 11054.5618,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1992,\n    lifeExp: 74.26,\n    pop: 20686918,\n    gdpPercap: 15215.6579,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 1997,\n    lifeExp: 75.25,\n    pop: 21628605,\n    gdpPercap: 20206.821,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 2002,\n    lifeExp: 76.99,\n    pop: 22454239,\n    gdpPercap: 23235.4233,\n  },\n  {\n    country: 'Taiwan',\n    continent: 'Asia',\n    year: 2007,\n    lifeExp: 78.4,\n    pop: 23174294,\n    gdpPercap: 28718.2768,\n  },\n  {\n    country: 'United States',\n    continent: 'Americas',\n    year: 1962,\n    lifeExp: 70.21,\n    pop: 186538000,\n    gdpPercap: 16173.1459,\n  },\n  {\n    country: 'United States',\n    continent: 'Americas',\n    year: 1967,\n    lifeExp: 70.76,\n    pop: 198712000,\n    gdpPercap: 19530.3656,\n  },\n  {\n    country: 'United States',\n    continent: 'Americas',\n    year: 1972,\n    lifeExp: 71.34,\n    pop: 209896000,\n    gdpPercap: 21806.0359,\n  },\n  {\n    country: 'United States',\n    continent: 'Americas',\n    year: 1977,\n    lifeExp: 73.38,\n    pop: 220239000,\n    gdpPercap: 24072.6321,\n  },\n  {\n    country: 'United States',\n    continent: 'Americas',\n    year: 1982,\n    lifeExp: 74.65,\n    pop: 232187835,\n    gdpPercap: 25009.5591,\n  },\n  {\n    country: 'United States',\n    continent: 'Americas',\n    year: 1987,\n    lifeExp: 75.02,\n    pop: 242803533,\n    gdpPercap: 29884.3504,\n  },\n  {\n    country: 'United States',\n    continent: 'Americas',\n    year: 1992,\n    lifeExp: 76.09,\n    pop: 256894189,\n    gdpPercap: 32003.9322,\n  },\n  {\n    country: 'United States',\n    continent: 'Americas',\n    year: 1997,\n    lifeExp: 76.81,\n    pop: 272911760,\n    gdpPercap: 35767.433,\n  },\n  {\n    country: 'United States',\n    continent: 'Americas',\n    year: 2002,\n    lifeExp: 77.31,\n    pop: 287675526,\n    gdpPercap: 39097.0995,\n  },\n  {\n    country: 'United States',\n    continent: 'Americas',\n    year: 2007,\n    lifeExp: 78.242,\n    pop: 301139947,\n    gdpPercap: 42951.6531,\n  },\n];\n\n// Top 20 countries of the highest gdpPercap in 2007\nexport const topGdpPercap = [\n  {\n    country: 'Norway',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 80.196,\n    pop: 4627926,\n    gdpPercap: 49357.1902,\n  },\n  {\n    country: 'Kuwait',\n    continent: 'Asia',\n    year: 2007,\n    lifeExp: 77.588,\n    pop: 2505559,\n    gdpPercap: 47306.9898,\n  },\n  {\n    country: 'Singapore',\n    continent: 'Asia',\n    year: 2007,\n    lifeExp: 79.972,\n    pop: 4553009,\n    gdpPercap: 47143.1796,\n  },\n  {\n    country: 'United States',\n    continent: 'Americas',\n    year: 2007,\n    lifeExp: 78.242,\n    pop: 301139947,\n    gdpPercap: 42951.6531,\n  },\n  {\n    country: 'Ireland',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 78.885,\n    pop: 4109086,\n    gdpPercap: 40675.9964,\n  },\n  {\n    country: 'Hong Kong, China',\n    continent: 'Asia',\n    year: 2007,\n    lifeExp: 82.208,\n    pop: 6980412,\n    gdpPercap: 39724.9787,\n  },\n  {\n    country: 'Switzerland',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 81.701,\n    pop: 7554661,\n    gdpPercap: 37506.4191,\n  },\n  {\n    country: 'Netherlands',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 79.762,\n    pop: 16570613,\n    gdpPercap: 36797.9333,\n  },\n  {\n    country: 'Canada',\n    continent: 'Americas',\n    year: 2007,\n    lifeExp: 80.653,\n    pop: 33390141,\n    gdpPercap: 36319.235,\n  },\n  {\n    country: 'Iceland',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 81.757,\n    pop: 301931,\n    gdpPercap: 36180.7892,\n  },\n  {\n    country: 'Austria',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 79.829,\n    pop: 8199783,\n    gdpPercap: 36126.4927,\n  },\n  {\n    country: 'Denmark',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 78.332,\n    pop: 5468120,\n    gdpPercap: 35278.4187,\n  },\n  {\n    country: 'Australia',\n    continent: 'Oceania',\n    year: 2007,\n    lifeExp: 81.235,\n    pop: 20434176,\n    gdpPercap: 34435.3674,\n  },\n  {\n    country: 'Sweden',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 80.884,\n    pop: 9031088,\n    gdpPercap: 33859.7484,\n  },\n  {\n    country: 'Belgium',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 79.441,\n    pop: 10392226,\n    gdpPercap: 33692.6051,\n  },\n  {\n    country: 'Finland',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 79.313,\n    pop: 5238460,\n    gdpPercap: 33207.0844,\n  },\n  {\n    country: 'United Kingdom',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 79.425,\n    pop: 60776238,\n    gdpPercap: 33203.2613,\n  },\n  {\n    country: 'Germany',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 79.406,\n    pop: 82400996,\n    gdpPercap: 32170.3744,\n  },\n  {\n    country: 'Japan',\n    continent: 'Asia',\n    year: 2007,\n    lifeExp: 82.603,\n    pop: 127467972,\n    gdpPercap: 31656.0681,\n  },\n  {\n    country: 'France',\n    continent: 'Europe',\n    year: 2007,\n    lifeExp: 80.657,\n    pop: 61083916,\n    gdpPercap: 30470.0167,\n  },\n];\n","export const DEFAULT_VALS = {\n  MARGIN: {\n    top: 20,\n    right: 20,\n    bottom: 50,\n    left: 55,\n  },\n};\n","import { GraphDimension, Margin, LegendConfig } from '@ichef/transcharts-graph';\n\nconst DEFAULT_LENGTH = 300;\n\n/**\n * Returns the inner width and height of the graph\n * @param dimension - the outer width and height of the graph\n * @param margin - the lengths of top, right, bottom, and left margin\n * @param headerDimension - the width and height of the header box\n * @param legendDimension - the width and height of the legend\n * @param legendOrient - orient of legend\n */\nexport function getInnerGraphDimensionAndMargin(\n  dimension: GraphDimension,\n  margin: Margin,\n  headerDimension: GraphDimension,\n  legendDimension: GraphDimension,\n  legendOrient: LegendConfig['orient'],\n) {\n  const { width: outerWidth, height: outerHeight } = dimension;\n  const { top, right, bottom, left } = margin;\n  let graphWidth = DEFAULT_LENGTH;\n  let graphHeight = DEFAULT_LENGTH;\n  const graphMargin = { ...margin };\n\n  // deal with the legend\n  switch (legendOrient) {\n    case 'left':\n    case 'right': {\n      graphWidth = outerWidth > 0\n        ? outerWidth - left - right - legendDimension.width\n        : DEFAULT_LENGTH;\n      graphHeight = outerHeight > 0 ? outerHeight - top - bottom : DEFAULT_LENGTH;\n      if (legendOrient === 'left') {\n        graphMargin.left += legendDimension.width;\n      }\n      break;\n    }\n    case 'top':\n    case 'bottom': {\n      graphWidth = outerWidth > 0 ? outerWidth - left - right : DEFAULT_LENGTH;\n      graphHeight = outerHeight > 0\n        ? outerHeight - top - bottom - legendDimension.height\n        : DEFAULT_LENGTH;\n      if (legendOrient === 'top') {\n        graphMargin.top += legendDimension.height;\n      }\n      break;\n    }\n    default: {\n      break;\n    }\n  }\n\n  // deal with the header box\n  graphMargin.top += headerDimension.height;\n  graphHeight -= headerDimension.height;\n\n  return {\n    graphMargin,\n    graphDimension: {\n      width: graphWidth,\n      height: graphHeight,\n    },\n  };\n}\n","import { useRef, useMemo } from 'react';\nimport {\n  // from common types\n  Margin,\n  GraphDimension,\n  ColorEncoding,\n  // from hooks\n  useContainerDimension,\n} from '@ichef/transcharts-graph';\n\nimport { getInnerGraphDimensionAndMargin } from '../utils/getInnerGraphDimensionAndMargin';\n\n/**\n * Returns a ref to be bind with a container,\n * and it calculates the inner and outer dimension of the graph\n * based on the given margin.\n */\nexport const useChartDimensions = (\n  /** Margin between the inner graph area and the outer svg */\n  margin: Margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 60,\n  },\n  color?: ColorEncoding,\n) => {\n  // compute the outer and inner dimension of the chart\n  const chartRef = useRef<HTMLDivElement>(null);\n  const legendRef = useRef<HTMLDivElement>(null);\n  const titleRef = useRef<HTMLDivElement>(null);\n  const outerDimension: GraphDimension = useContainerDimension(chartRef);\n  const legendDimension = useContainerDimension(legendRef);\n  const headerDimension = useContainerDimension(titleRef);\n  const legendOrient = (color && color.legend && color.legend.orient) || 'right';\n\n  const { graphDimension, graphMargin }  = useMemo(\n    () => {\n      return getInnerGraphDimensionAndMargin(\n        outerDimension,\n        margin,\n        headerDimension,\n        legendDimension,\n        legendOrient,\n      );\n    },\n    [\n      outerDimension,\n      margin,\n      headerDimension,\n      legendDimension,\n      legendOrient,\n    ],\n  );\n\n  return {\n    /** Ref to the chart, which is to be passed in the props of the container */\n    chartRef,\n\n    /** Ref to the header box, which is to be passed in the props of the header box */\n    titleRef,\n\n    /** Ref to the legend, which is to be passed in the props of the legend */\n    legendRef,\n\n    /** Width and height of the outer container */\n    outerDimension,\n\n    /** Width and height of the inner graph (does not contain axes, legend, etc...) */\n    graphDimension,\n\n    /** Margin between the chart container and the inner graph */\n    graphMargin,\n  };\n};\n","import {\n  // from common types\n  FieldSelector,\n} from '@ichef/transcharts-graph';\n\n/**\n * Return the y-values in the `dataGroups` grouped by projected x values.\n * -  Structure of groupedY: \"groupedY\":[ { \"index of dataGroup\": \"value\" }, ... ]\n * @example\n * [{\n *  \"xPos\": 0,\n *  \"xStrVal\": \"0\",\n *  \"groupedY\": [{\"groupIdx\": 0, \"yStrVal\": 9, \"yPos\": 18, \"color\": \"#deebf7\"}],\n *  },\n * {\n *  \"xPos\": 109.12812500000001,\n *  \"xStrVal\": \"2\",\n *  \"groupedY\": [{\"groupIdx\": 0, \"yStrVal\": 3, \"yPos\": 6, \"color\": \"#deebf7\"}, ...],\n * }]\n */\nexport function getAxisProjectedValues(\n  /** Data grouped in `useCartesianEncodings()`  */\n  dataGroups: object[][],\n\n  /** Functions to get value on the x-axis */\n  xSelector: FieldSelector,\n\n  /** Functions to get value on the y-axis */\n  ySelector: FieldSelector,\n\n  /** Functions to get the formatted color string */\n  getColorString: (record: any) => string,\n) {\n  // project by original values on the axis\n  const projections = {};\n  const xPositions = {};\n  dataGroups.forEach((group, groupIdx) => {\n    group.forEach((row) => {\n      const xStrVal = xSelector.getFormattedStringVal(row);\n      const yStrVal = ySelector.getFormattedStringVal(row);\n      const xPos = xSelector.getScaledVal(row);\n      const yPos = ySelector.getScaledVal(row);\n      if (!projections[xStrVal]) {\n        projections[xStrVal] = [];\n        xPositions[xStrVal] = xPos;\n      }\n      projections[xStrVal].push({\n        groupIdx,\n        yStrVal,\n        yPos,\n        color: getColorString(row),\n      });\n    });\n  });\n\n  // convert the position along the axis, and sort by the converted values\n  const columns = Object.keys(projections).reduce(\n    (accum, xStrVal: any) => {\n      const groupedY = projections[xStrVal];\n      // ensure that we always get the correct type, not a string instead\n      const xPos: number = xPositions[xStrVal] || 0;\n      const column = {\n        xPos,\n        xStrVal,\n        groupedY,\n      };\n\n      return [...accum, column];\n    },\n    []\n  );\n\n  return columns.sort((a, b) => (a.xPos - b.xPos));\n}\n","import { useMemo } from 'react';\nimport values from 'lodash/values';\nimport {\n  // from utils\n  getColorScale,\n  getDataGroupByEncodings,\n  getXAxisScale,\n  getYAxisScale,\n  getRecordFieldSelector,\n  getValByScaleType,\n  // from common types\n  Encoding,\n  AxisEncoding,\n  ColorEncoding,\n  GraphDimension,\n  // from themes\n  Theme,\n  // from TooltipLayer\n  AxisProjectedValue,\n} from '@ichef/transcharts-graph';\n\nimport { getAxisProjectedValues } from '../utils/getAxisProjectedValues';\n\n/**\n * Return [min, max] of a column selected from the grouped data\n */\nfunction getLinearDomainFromDataGroup(\n  dataGroups: object[][],\n  keyField: string,\n  valueField: string,\n) {\n  const aggreatedMax: object = {};\n  const aggreatedMin: object = {};\n  dataGroups.forEach((data: object[]) => {\n    data.forEach((row) => {\n      const key = row[keyField];\n      const val = row[valueField];\n      if (val >= 0) {\n        aggreatedMax[key] = aggreatedMax[key]\n          ? aggreatedMax[key] + val\n          : val;\n      } else {\n        aggreatedMin[key] = aggreatedMin[key]\n          ? aggreatedMin[key] + val\n          : val;\n      }\n    });\n  });\n\n  const min = Math.min(0, ...values(aggreatedMin));\n  const max = Math.max(0, ...values(aggreatedMax));\n\n  return [min, max];\n}\n\n/**\n * It returns calculated groups of data and its value selectors\n * from the given encodings of Cartesian plots.\n */\nexport const useCartesianEncodings = (\n  /** Width and height of the inner graph (does not contain axes, legend, etc...) */\n  graphDimension: GraphDimension,\n\n  /** Theme of the chart */\n  theme: Theme,\n\n  /** Array of rows of data */\n  data: object[],\n\n  /** Field and data type of x-axis */\n  x: AxisEncoding,\n\n  /** Field and data type of y-axis */\n  y: AxisEncoding,\n\n  /** Fields and definitions for colors */\n  color?: ColorEncoding,\n) => {\n  // get the inner width and height of the graph\n  const { width, height } = graphDimension;\n\n  // sort the data\n  const sortedData = useMemo(\n    () => {\n      const getValue = getValByScaleType(x.scale);\n      const getOriginalVal = (record: object) => getValue(record[x.field]);\n\n      return (\n        data.sort(\n          (rowA, rowB) => getOriginalVal(rowA) - getOriginalVal(rowB),\n        )\n      );\n    },\n    [data, x],\n  );\n\n  // groups the data by colors\n  const dataGroups = useMemo(\n    () => {\n      const encodings = [color].filter((encoding): encoding is Encoding => !!encoding);\n      return getDataGroupByEncodings(sortedData, encodings);\n    },\n    [color, sortedData],\n  );\n\n  // the scales and configs of the axis based on its encodings\n  const xAxis = useMemo(\n    () => {\n      const axisScale = getXAxisScale({\n        data,\n        axisLength: width,\n        encoding: x,\n      });\n\n      // update the domain if the domains of x-y scales is band-linear\n      if (x.scale === 'linear' && y.scale === 'band') {\n        axisScale.scale.domain(getLinearDomainFromDataGroup(dataGroups, y.field, x.field));\n      }\n      return axisScale;\n    },\n    [data, width, x],\n  );\n  const yAxis = useMemo(\n    () => {\n      const axisScale = getYAxisScale({\n        data,\n        axisLength: height,\n        encoding: y,\n      });\n\n      // update the domain if the domains of x-y scales is linear-band\n      if (x.scale === 'band' && y.scale === 'linear') {\n        axisScale.scale.domain(getLinearDomainFromDataGroup(dataGroups, x.field, y.field));\n      }\n      return axisScale;\n    },\n    [data, height, y],\n  );\n\n  // selectors to get the original/scaled/formatted values\n  const xSelector = useMemo(\n    () => getRecordFieldSelector(xAxis),\n    [xAxis],\n  );\n  const ySelector = useMemo(\n    () => getRecordFieldSelector(yAxis),\n    [yAxis],\n  );\n\n  // handle the colors\n  const colorScale = useMemo(\n    () => {\n      if (typeof color === 'undefined') {\n        return null;\n      }\n      return getColorScale({\n        data,\n        encoding: color,\n        colors: theme.colors,\n      });\n    },\n    [color, data, theme.colors],\n  );\n  const defaultColor = theme.colors.category[0];\n  const getColorString = useMemo(\n    () => (\n      colorScale\n      ? getRecordFieldSelector(colorScale).getScaledVal\n      : () => defaultColor\n    ),\n    [colorScale, defaultColor],\n  );\n\n  const axisProjectedValues: AxisProjectedValue[] = useMemo(\n    () => {\n      return getAxisProjectedValues(dataGroups, xSelector, ySelector, getColorString);\n    },\n    [dataGroups, xSelector, ySelector, getColorString],\n  );\n\n  return {\n    /** Array of data grouped by fields of colors  */\n    dataGroups,\n\n    /**\n     * The y-values in the `dataGroups` grouped by projected x values.\n     * -  Structure of groupedY: \"groupedY\":[ { \"index of dataGroup\": \"value\" }, ... ]\n     * @example\n     * [{\n     *  \"xPos\": 0,\n     *  \"xStrVal\": \"0\",\n     *  \"groupedY\": [{\"groupIdx\": 0, \"yStrVal\": 9, \"yPos\": 18, \"color\": \"#deebf7\"}],\n     *  },\n     * {\n     *  \"xPos\": 109.12812500000001,\n     *  \"xStrVal\": \"2\",\n     *  \"groupedY\": [{\"groupIdx\": 0, \"yStrVal\": 3, \"yPos\": 6, \"color\": \"#deebf7\"}, ...],\n     * }]\n     */\n    axisProjectedValues,\n\n    /** d3 scale functions and other related configurations computed for various encodings */\n    scalesConfig: {\n      /** scale function and configs for x-axis */\n      x: xAxis,\n\n      /** scale function and configs for y-axis */\n      y: yAxis,\n\n      /** scale function and configs for the color scale; null if there is no color encoding */\n      color: colorScale,\n    },\n\n    /** Contains functions to select values from a data row */\n    rowValSelectors: {\n      /** Functions to get value on the x-axis */\n      x: xSelector,\n\n      /** Functions to get value on the y-axis */\n      y: ySelector,\n\n      /** Functions to get colors */\n      color: {\n        /** Function to get the color string */\n        getString: getColorString,\n      },\n    },\n  };\n};\n","import React, { useContext } from 'react';\nimport {\n  // from AxisLayer\n  AxisLayer,\n  // from Overlays\n  HeaderBox,\n  HeaderBoxProps,\n  // from common types\n  AxisScale,\n  Margin,\n  GraphDimension,\n  AxisEncoding,\n  // theme\n  ThemeContext,\n  GlobalTheme,\n  // styled-components\n  styled,\n} from '@ichef/transcharts-graph';\n\nexport interface FrameContentProps {\n  /** Width and height of the outer container including the margin */\n  outerDimension: GraphDimension;\n\n  /** Width and height of the graph to be drawed inside the SVG group */\n  graphDimension: GraphDimension;\n\n  /** Axis encoding of x-axis */\n  x: AxisEncoding;\n\n  /** Axis encoding of y-axis */\n  y: AxisEncoding;\n\n  /** Margin between the inner graph area and the outer svg */\n  margin: Margin;\n\n  /** It determines how the axes are drawn */\n  data: object[];\n\n  /** Should show the axis on the left or not */\n  showLeftAxis: boolean;\n\n  /** Should show the axis on the bottom or not */\n  showBottomAxis: boolean;\n\n  /** Whether to display the axes in the background or foreground of the chart */\n  axisInBackground: boolean;\n\n  scalesConfig: {\n    x: AxisScale,\n    y: AxisScale,\n  };\n\n  /** Elements to be overlayed on top of the SVG */\n  svgOverlay?: React.ReactNode;\n\n  /** Elements to be drawed inside of the SVG */\n  children: React.ReactNode;\n}\nexport interface SvgFrameProps extends FrameContentProps {\n  /** Ref to <HeaderBox> */\n  titleRef: React.RefObject<HTMLDivElement>;\n\n  /** Title of <HeaderBox> */\n  title?: HeaderBoxProps['title'];\n\n  /** Description of <HeaderBox> */\n  titleDesc?: HeaderBoxProps['desc'];\n\n  /** Text align of the header box */\n  titleAlign?: HeaderBoxProps['align'];\n}\n\nconst defaultProps = {\n  showLeftAxis: true,\n  showBottomAxis: true,\n  axisInBackground: true,\n};\n\nconst Wrapper = styled.div<GlobalTheme>`\n  width: 100%;\n  height: 100%;\n  position: relative;\n  color: ${({ fontColor }) => fontColor};\n`;\n\nconst FrameContent = ({\n  outerDimension,\n  graphDimension,\n  x,\n  y,\n  margin,\n  data,\n  scalesConfig,\n  showLeftAxis,\n  showBottomAxis,\n  axisInBackground,\n  svgOverlay,\n  children,\n}: FrameContentProps) => {\n  const { width: outerWidth, height: outerHeight } = outerDimension;\n  const { width: graphWidth, height: graphHeight } = graphDimension;\n  const axisLayer = (\n    <AxisLayer\n      width={graphWidth}\n      height={graphHeight}\n      showLeftAxis={showLeftAxis}\n      showBottomAxis={showBottomAxis}\n      data={data}\n      x={x}\n      y={y}\n      xAxisScale={scalesConfig.x.scale}\n      yAxisScale={scalesConfig.y.scale}\n    />\n  );\n\n  return (\n    <>\n      <svg width={outerWidth} height={outerHeight}>\n        <g transform={`translate(${margin.left}, ${margin.top})`}>\n          {axisInBackground ? (<>{axisLayer}{children}</>) : (<>{children}{axisLayer}</>)}\n        </g>\n      </svg>\n      {svgOverlay}\n    </>\n  );\n};\nFrameContent.defaultProps = defaultProps;\n\n/**\n * It manages the size of the chart container, SVG, and the axes\n * that generally used across different charts.\n */\nexport const SvgWithAxisFrame = React.forwardRef<\n  HTMLDivElement,\n  JSX.LibraryManagedAttributes<typeof FrameContent, SvgFrameProps>\n>(({\n  titleRef,\n  title,\n  titleDesc,\n  titleAlign,\n  ...restProps\n}, ref) => {\n  const theme = useContext(ThemeContext);\n  const { globalStyle } = theme;\n\n  return (\n    <Wrapper\n      ref={ref}\n      {...globalStyle}\n    >\n      <FrameContent {...restProps} />\n      <HeaderBox\n        ref={titleRef}\n        title={title}\n        desc={titleDesc}\n        align={titleAlign}\n      />\n    </Wrapper>\n  );\n});\n","import React, { useContext, useMemo } from 'react';\nimport { LinePath } from '@vx/shape';\nimport {\n  // from HoverLayer\n  HoverLayer,\n  // from hooks\n  useHoverState,\n  // from TooltipLayer\n  TooltipLayer,\n  AxisProjectedValue,\n  // from Legend,\n  LegendGroup,\n  // from common types\n  FieldSelector,\n  // from themes\n  Theme,\n  ThemeContext,\n} from '@ichef/transcharts-graph';\n\nimport { useChartDimensions } from '../hooks/useChartDimensions';\nimport { useCartesianEncodings } from '../hooks/useCartesianEncodings';\nimport { SvgWithAxisFrame } from '../frames/SvgWithAxisFrame';\nimport { DEFAULT_VALS } from '../common/config';\nimport { CommonChartProps } from '../common/types';\n\n/**\n * Return the position of the hovering detection rect.\n * If the given index exceeds its bound, it will return its closest value.\n */\nfunction getXPosByIndex(arr: AxisProjectedValue[], idx: number) {\n  let arrIdx = idx < 0 ? 0 : idx;\n  if (idx >= arr.length) {\n    arrIdx = arr.length - 1;\n  }\n  return arr[arrIdx].xPos;\n}\n\nexport type LineChartProps = CommonChartProps;\n\n/** A line and a dot for the point being hovered */\nconst HoveringIndicator = ({ hovering, projectedPoints, height }: {\n  hovering: boolean,\n  projectedPoints: AxisProjectedValue,\n  height: number,\n}) => {\n  if (!hovering) {\n    return null;\n  }\n\n  const circles = projectedPoints.groupedY.map(pointY => (\n    <circle\n      key={`c-${pointY.yStrVal}`}\n      cx={projectedPoints.xPos}\n      cy={pointY.yPos}\n      r={4.5}\n      fill={pointY.color}\n    />\n  ));\n\n  return(\n    <>\n      <line\n        x1={projectedPoints.xPos}\n        y1={0}\n        x2={projectedPoints.xPos}\n        y2={height}\n        style={{ stroke:'rgba(124, 137, 147, 0.25)', strokeWidth: 2 }}\n      />\n      {circles}\n    </>\n  );\n};\n\nconst DataLine = ({ color, xSelector, ySelector, rows }: {\n  color: string,\n  xSelector: FieldSelector,\n  ySelector: FieldSelector,\n  rows: object[],\n}) => {\n  const lineDots = rows.map((dataRow, index) => (\n    <circle\n      key={`c-${index}`}\n      cx={xSelector.getScaledVal(dataRow)}\n      cy={ySelector.getScaledVal(dataRow)}\n      r={3.5}\n      fill={color}\n    />\n  ));\n  return (\n    <>\n      {/* Draw the line */}\n      <LinePath\n        data={rows}\n        x={xSelector.getScaledVal}\n        y={ySelector.getScaledVal}\n        stroke={color}\n        strokeWidth={2}\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n\n      {/* Draw dots on the line */}\n      {lineDots}\n    </>\n  );\n};\n\nconst defaultProps = {\n  margin: DEFAULT_VALS.MARGIN,\n};\n\nexport const LineChart = ({\n  data,\n  margin,\n  x,\n  y,\n  color,\n  title,\n  titleDesc,\n  titleAlign,\n  showLeftAxis,\n  showBottomAxis,\n}: LineChartProps) => {\n  const theme = useContext<Theme>(ThemeContext);\n  const {\n    chartRef,\n    titleRef,\n    legendRef,\n    outerDimension,\n    graphDimension,\n    graphMargin,\n  } = useChartDimensions(margin, color);\n  const { width: graphWidth, height: graphHeight } = graphDimension;\n  const { clearHovering, hovering, hoveredPoint, setHoveredPosAndIndex } = useHoverState();\n  const {\n    dataGroups,\n    scalesConfig,\n    rowValSelectors,\n    axisProjectedValues,\n  } = useCartesianEncodings(graphDimension, theme, data, x, y, color);\n\n  const graphGroup = useMemo(\n    () => (\n      dataGroups.map(\n        (rows: object[], index: number) => {\n          const colorString: string = rowValSelectors.color.getString(rows[0]);\n          return (\n            <DataLine\n              key={`row-${index}`}\n              color={colorString}\n              rows={rows}\n              xSelector={rowValSelectors.x}\n              ySelector={rowValSelectors.y}\n            />\n          );\n        }\n      )\n    ),\n    [dataGroups, rowValSelectors]\n  );\n\n  const hoverDetectionComponents = useMemo(\n    () => (\n      axisProjectedValues.map(\n        (row, idx) => {\n          const rectX = (row.xPos + getXPosByIndex(axisProjectedValues, idx - 1)) / 2;\n\n          const rectWidth = (\n            (row.xPos + getXPosByIndex(axisProjectedValues, idx + 1)) / 2\n          ) - rectX;\n\n          return (\n            <rect\n              // #TODO: use unique keys rather than array index\n              key={`colli-${idx}`}\n              x={rectX}\n              y={0}\n              width={rectWidth}\n              height={graphHeight}\n              opacity={0}\n            />\n          );\n        }\n      )\n    ),\n    [axisProjectedValues, graphHeight]\n  );\n\n  return (\n    <SvgWithAxisFrame\n      ref={chartRef}\n      titleRef={titleRef}\n      title={title}\n      titleDesc={titleDesc}\n      titleAlign={titleAlign}\n      outerDimension={outerDimension}\n      graphDimension={graphDimension}\n      showLeftAxis={showLeftAxis}\n      showBottomAxis={showBottomAxis}\n      x={x}\n      y={y}\n      margin={graphMargin}\n      data={data}\n      scalesConfig={scalesConfig}\n      svgOverlay={\n        <>\n          {/* Draw the tooltip */}\n          <TooltipLayer\n            hovering={hovering}\n            hoveredPoint={hoveredPoint}\n            axisProjectedValues={axisProjectedValues}\n            graphWidth={graphWidth}\n            graphHeight={graphHeight}\n            margin={graphMargin}\n          />\n          {/* Draw the legned */}\n          <LegendGroup\n            color={color && {\n              ...color,\n              ...scalesConfig.color!,\n            }}\n            ref={legendRef}\n          />\n        </>\n      }\n    >\n      {graphGroup}\n      <HoveringIndicator\n        hovering={hovering}\n        projectedPoints={axisProjectedValues[hoveredPoint.index]}\n        height={graphHeight}\n      />\n\n      {/* Areas which are used to detect mouse or touch interactions */}\n      <HoverLayer\n        setHoveredPosAndIndex={setHoveredPosAndIndex}\n        clearHovering={clearHovering}\n        hoverDetectionComponents={hoverDetectionComponents}\n      />\n    </SvgWithAxisFrame>\n  );\n};\nLineChart.defaultProps = defaultProps;\n","import React, { useContext, useMemo, useCallback } from 'react';\nimport { ScaleBand, ScaleLinear } from 'd3-scale';\nimport {\n  // from HoverLayer\n  HoverLayer,\n  // from hooks\n  useHoverState,\n  // from TooltipLayer\n  TooltipLayer,\n  // from Legend,\n  LegendGroup,\n  // from common types\n  AxisEncoding,\n  // from themes\n  Theme,\n  ThemeContext,\n} from '@ichef/transcharts-graph';\n\nimport { useChartDimensions } from '../hooks/useChartDimensions';\nimport { useCartesianEncodings } from '../hooks/useCartesianEncodings';\nimport { SvgWithAxisFrame } from '../frames/SvgWithAxisFrame';\nimport { DEFAULT_VALS } from '../common/config';\nimport { CommonChartProps } from '../common/types';\n\n/** A line and a dot for the point being hovered */\nconst HoveringIndicator = ({ hovering, x, y, width, height }: {\n  hovering: boolean,\n  x: number,\n  y: number,\n  width: number,\n  height: number,\n}) => {\n  if (!hovering) {\n    return null;\n  }\n\n  return(\n    <rect\n      x={x}\n      y={y}\n      width={width}\n      height={height}\n      opacity={0.5}\n      fill=\"rgba(124, 137, 147, 0.25)\"\n    />\n  );\n};\n\nexport interface BarChartProps extends CommonChartProps {\n  /** Ratio of the paddings between bars */\n  paddingInner: number;\n}\n\nconst defaultProps = {\n  margin: DEFAULT_VALS.MARGIN,\n  paddingInner: 0.1,\n};\n\nexport const BarChart = ({\n  data,\n  // FIXME: remove the default margin after fixing the defaultProps of`<SvgWithAxisFrame>`\n  margin = {\n    top: 20,\n    right: 20,\n    bottom: 30,\n    left: 60,\n  },\n  x,\n  y,\n  color,\n  title,\n  titleDesc,\n  titleAlign,\n  showLeftAxis,\n  showBottomAxis,\n  paddingInner = 0.1,\n}: BarChartProps) => {\n  const theme = useContext<Theme>(ThemeContext);\n  const {\n    chartRef,\n    titleRef,\n    legendRef,\n    outerDimension,\n    graphDimension,\n  } = useChartDimensions(margin);\n  const { width: graphWidth, height: graphHeight } = graphDimension;\n\n  const xEncoding: AxisEncoding = { ...x, scale: 'band', scaleConfig: {\n    paddingInner,\n  }};\n  const yEncoding: AxisEncoding = { ...y, scale: 'linear' };\n  const {\n    dataGroups,\n    scalesConfig,\n    rowValSelectors,\n    axisProjectedValues,\n  } = useCartesianEncodings(graphDimension, theme, data, xEncoding, yEncoding, color);\n  const { clearHovering, hovering, hoveredPoint, setHoveredPosAndIndex } = useHoverState();\n\n  const bandScale = scalesConfig.x.scale as ScaleBand<any>;\n  const linearScale = scalesConfig.y.scale as ScaleLinear<any, any>;\n  const bandWidth = bandScale.bandwidth();\n\n  /**\n   * Returns the size and position of the hovering detection rectangle\n   * or hovering highlight rectangle\n   */\n  const getHoveringRectPos = useCallback(\n    (idx: number) => {\n      const paddingVal = bandWidth * paddingInner;\n      const xPos = idx === 0\n        ? 0\n        : axisProjectedValues[idx].xPos - paddingVal / 2;\n      const width = idx === 0 || idx === data.length - 1\n            ? bandWidth + paddingVal / 2\n            : bandWidth + paddingVal;\n\n      return {\n        width,\n        height: graphHeight,\n        x: xPos,\n        y: 0,\n      };\n    },\n    [bandWidth, paddingInner],\n  );\n\n  const hoverDetectionComponents = useMemo(\n    () => (\n      axisProjectedValues.map(\n        (row, idx) => {\n          return (\n            <rect\n              // #TODO: use unique keys rather than array index\n              key={`colli-${idx}`}\n              x={row.xPos}\n              y={0}\n              height={graphHeight}\n              width={bandWidth}\n              opacity={0}\n              {...{ ...getHoveringRectPos(idx) }}\n            />\n          );\n        }\n      )\n    ),\n    [axisProjectedValues, graphHeight, bandWidth, getHoveringRectPos]\n  );\n\n  const graphGroup = useMemo(\n    () => {\n      const baseY = linearScale(0);\n\n      // calculate the accumulated y position of certain points\n      const positiveY = {};\n      const nonPositiveY = {};\n      const getAccumY = (xPos: number, scaledY: number) => {\n        if (scaledY >= 0) {\n          if (!positiveY[xPos]) {\n            positiveY[xPos] = baseY;\n          }\n          positiveY[xPos] -= scaledY;\n          return positiveY[xPos];\n        }\n\n        // scaledY < 0\n        const yPos = !nonPositiveY[xPos] ? baseY : nonPositiveY[xPos];\n        nonPositiveY[xPos] = yPos - scaledY;\n        return yPos;\n      };\n\n      return dataGroups.map(\n        (rows: object[], groupIdx: number) => {\n          return rows.map((row: object, rowIdx: number) => {\n            const colorString: string = rowValSelectors.color.getString(rows[0]);\n            const xPos = rowValSelectors.x.getScaledVal(row);\n            const scaledY = rowValSelectors.y.getScaledVal(row);\n            const height = scaledY >= 0\n              ? baseY - scaledY\n              : baseY - graphHeight - scaledY;\n\n            return (\n              <rect\n                key={`bar-${rowIdx}`}\n                x={xPos}\n                y={getAccumY(xPos, height)}\n                width={bandWidth}\n                height={Math.abs(height)}\n                fill={colorString}\n              />\n            );\n          });\n        }\n      );\n    },\n    [dataGroups, scalesConfig, rowValSelectors],\n  );\n\n  return (\n    <SvgWithAxisFrame\n      ref={chartRef}\n      titleRef={titleRef}\n      title={title}\n      titleDesc={titleDesc}\n      titleAlign={titleAlign}\n      outerDimension={outerDimension}\n      graphDimension={graphDimension}\n      showLeftAxis={showLeftAxis}\n      showBottomAxis={showBottomAxis}\n      x={x}\n      y={y}\n      // put the axes on top of the bars\n      axisInBackground={false}\n      margin={margin}\n      data={data}\n      scalesConfig={scalesConfig}\n      svgOverlay={\n        <>\n          {/* Draw the tooltip */}\n          <TooltipLayer\n            hovering={hovering}\n            hoveredPoint={hoveredPoint}\n            axisProjectedValues={axisProjectedValues}\n            graphWidth={graphWidth}\n            graphHeight={graphHeight}\n            margin={margin}\n            xOffset={bandWidth / 2}\n          />\n          {/* Draw the legned */}\n          <LegendGroup\n            color={color && {\n              ...color,\n              ...scalesConfig.color!,\n            }}\n            ref={legendRef}\n          />\n        </>\n      }\n    >\n      {graphGroup}\n      <HoveringIndicator\n        hovering={hovering}\n        {...{ ...getHoveringRectPos(hoveredPoint.index) }}\n      />\n\n      {/* Areas which are used to detect mouse or touch interactions */}\n      <HoverLayer\n        setHoveredPosAndIndex={setHoveredPosAndIndex}\n        clearHovering={clearHovering}\n        hoverDetectionComponents={hoverDetectionComponents}\n      />\n    </SvgWithAxisFrame>\n  );\n};\nBarChart.defaultProps = defaultProps;\n","export * from './common/config';\nexport * from './hooks/useChartDimensions';\nexport * from './hooks/useCartesianEncodings';\nexport * from './line/LineChart';\nexport * from './bar/BarChart';\nexport * from './frames/SvgWithAxisFrame';\nexport * from './utils/getInnerGraphDimensionAndMargin';\n"],"sourceRoot":""}